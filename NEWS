Version 0.9
===========
- Most higher level functionality has been reimplemented in C and exposed as C APIs

Version 0.8
===========
- Added disnix-diagnose that can be used to spawn remote shell sessions to execute diagnoses and maintenance tasks

- Added disnix-run-activity that can be used to directly execute Disnix activities without a multi-user installation or D-Bus service

- Services can now also declare inter-dependencies with the connectTo property that disregards the activation order. This is useful for systems with cyclic connections and faster deployments in which it is allowed to break a connection

- The copy closure command now partitions the requisites to prevent hitting the "arguments too long" error

- The disnix-env command now also takes the --list-generations option to display coordinator profile generations and --delete-generations, --delete-all-generations to delete them

Version 0.7
===========
- When moving state it will no longer be deleted by default. Instead, the user must provide --delete-state

- Add disnix-reconstruct that can reconstruct a deployment configuration on the coordinator if the data gets lost

- disnix-query can now also group services per container and display all its properties defined in the profile manifest

- All package management operation concerns are in libpkgmgmt, all state management concerns in libstatemgmt

- disnix-snapshot/disnix-restore/disnix-delete-state/disnix-clean-snapshots: allow filtering on container and component level

- Created three new tools encapsulating meaningful sets of activities: disnix-delegate, disnix-deploy and disnix-migrate

- disnix-env is now a composition of disnix-delegate, disnix-manifest and disnix-deploy

- Process orchestration is now handled by libprocreact

- Iterating or traversing over data structures is now handled by libmanifest, libdistderivation and libinfrastructure

- disnix-capture-infra, disnix-query now capture data in parallel to speed up the entire operation

- Added a check for the name attributes in the services model

- disnix-snapshot and disnix-restore now provide an alternative depth-first approach which is more space efficient, but slower

Version 0.6
===========
- Changed the distribution internals. Now every service maps to a container on a target system. When no container is specified, it auto maps a service to the container with the type name

- New formalism for the infrastructure model. Now every target defines system settings, general properties and properties per container

- Activation parameters are now scoped. Only parameters that a Dysnomia module needs to know about are propagated.

- disnix-visualize also shows containers to which services have been deployed

- Added disnix-capture-infra that consults the remote machines' Dysnomia container configurations to generate an infrastructure expression

- Add package type to deploy packages as services. Packages will get installed, but not activated or deactivated.

Version 0.5
===========
- Services model also takes an invDistribution parameter, which refers to the infrastructure model in which each target is augmented with the services that have been mapped to it

- Some noise has been removed from the output

- Introduced SSH_USER environment variable to configure the username to connect with to remote machines with disnix-ssh-client

- disnix-lock and disnix-visualize can now also be called without a file parameter. With no file parameter, it attempts to open the manifest of the last deployment

- Added a Debian compatible init.d script for convenience for installing on Debian derivatives

- If the data migration phase fails, the user gets some notes on how to resolve it

- disnix-env now also implements --rollback and --switch-generation

- Eliminates dependency on dbus-glib and move to gdbus

- Major restructurings in manual and additional chapters describing state management, and deploying target-specific services

Version 0.4
===========
- The distributed derivation and manifest generator now pass the XML input as files to support bigger ones (Nix 1.9 or newer required)

- Manual pages are now generated with help2man and doclifter

- Implemented snapshot and restore operations that can be optionally enabled

- Separated locking and profile operations from disnix-activate into disnix-lock and disnix-set

Version 0.3
===========
- Added Cygwin installation instructions

- Disnix uses Dysnomia for activation, deactivation, lock and unlock operations instead of adhoc activation scripts

- Added manual page for disnix-query

- Implemented SIGINT handler for disnix-activate, that allows the process to interrupt gracefully.

- Implemented DISNIX_PROFILE environment variable

- Simplified manifest format

- Many additional testcases and bugfixes

- Improved logging

- Concurrent closure transfers

- Parallelised transition process

- Multi connection protocol support

Version 0.2
===========
- Added disnix-visualize tool

- Fixed bug with zombie processes

- Major code cleanups (boilerplate and separated shared stuff in libraries)

- Implemented some features for integration with a virtualisation extension

- Added user manual

- Manual pages are in docbook now

- Fixed memory leaks in disnix-activate

- Larger test suite

- Public library interface for extensions

- Copes with machines that disappear

- Services model provides pkgs argument. Does not have to be imported manually.

- Doxygen API documentation

