#!/bin/bash
set -e
set -o pipefail

# Disnix - A Nix-based distributed service deployment tool
# Copyright (C) 2008-2019  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Checks the client interface property.
# If not set it will use the value of the DISNIX_CLIENT_INTERFACE environment
# variable or else a default value.

checkClientInterface()
{
    if [ "$interface" = "" ]
    then
        if [ "$DISNIX_CLIENT_INTERFACE" = "" ]
        then
            interface="disnix-ssh-client"
        else
            interface=$DISNIX_CLIENT_INTERFACE
        fi
    fi
}

# Checks the target property.
# If not set it will use the value of the DISNIX_TARGET_PROPERTY environment
# variable or else a default value.

checkTargetProperty()
{
    if [ "$targetProperty" = "" ]
    then
        if [ "$DISNIX_TARGET_PROPERTY" != "" ]
        then
            targetProperty=$DISNIX_TARGET_PROPERTY
        else
            targetProperty="hostname";
        fi
    fi
}

# Checks the profile property.
# If not set it will use the value of the of the DISNIX_PROFILE environment
# variable or else a default value.

checkProfile()
{
    if [ "$profile" = "" ]
    then
        if [ "$DISNIX_PROFILE" = "" ]
        then
            profile=default
        else
            profile=$DISNIX_PROFILE
        fi
    fi
}

# Checks whether a service expression is given. Exits with status 1 if not set.

checkServicesFile()
{
    if [ "$servicesFile" = "" ]
    then
        echo "ERROR: A services expression must be specified!" >&2
        exit 1
    fi
}

# Checks whether an infrastructure expression is given. Exits with status 1 if not set.

checkInfrastructureFile()
{
    if [ "$infrastructureFile" = "" ]
    then
        echo "ERROR: An infrastructure expression must be specified!" >&2
        exit 1
    fi
}

# Checks whether a distribution expression is given. Exits with status 1 if not set.

checkDistributionFile()
{
    if [ "$distributionFile" = "" ]
    then
        echo "ERROR: A distribution expression must be specified!" >&2
        exit 1
    fi
}

# Checks whether a packages expression is given. Exits with status 1 if not set.

checkPackagesFile()
{
    if [ "$packagesFile" = "" ]
    then
        echo "ERROR: A packages expression must be specified!" >&2
        exit 1
    fi
}

# Check all the possible input model combinations. Exists with status 1 if an
# invalid combination is given or when a mandatory model is not specified.
# It sets the deploymentModel environment variable to indicate what kind of
# front-end model needs to be converted.

checkModels()
{
    if [ "$architectureFile" = "" ]
    then
        checkInfrastructureFile

        if [ "$servicesFile" != "" ] || [ "$distributionFile" != "" ]
        then
            checkServicesFile
            checkDistributionFile
            deploymentModel="models"
        elif [ "$packagesFile" != "" ]
        then
            checkPackagesFile
            deploymentModel="packages"
        else
            echo "An unknown combination of models were provided!" >&2
            exit 1
        fi
    else
        deploymentModel="architecture"
    fi
}

# Check all the possible deploy input model combinations. Exists with status 1 if
# an invalid combination is given or when a mandatory model is not specified.
# It sets the deploymentModel environment variable to indicate what kind of
# front-end model needs to be converted.

checkDeployModels()
{
    if [ "$deploymentFile" = "" ]
    then
        checkModels
    else
        deploymentModel="deployment"
    fi
}

# Check all the possible build input model combinations. Exists with status 1 if
# an invalid combination is given or when a mandatory model is not specified.
# It sets the deploymentModel environment variable to indicate what kind of
# front-end model needs to be converted.

checkBuildModels()
{
    if [ "$buildFile" = "" ]
    then
        checkModels
    else
        deploymentModel="build"
    fi
}

# Generates the proper combination input model parameters that various Disnix
# utilities take as inputs. You need to verify the kind of the deployment model
# first by invoking checkModels()

generateModelArgs()
{
    case "$deploymentModel" in
        models)
            modelArgs="-s $servicesFile -i $infrastructureFile -d $distributionFile"
            if [ "$packagesFile" != "" ]
            then
                modelArgs="$modelArgs -P $packagesFile"
            fi
            ;;
        packages)
            modelArgs="-P $packagesFile -i $infrastructureFile"
            ;;
        architecture)
            modelArgs="-A $architectureFile"
            ;;
        deployment)
            modelArgs="-D $deploymentFile"

            if [ "$buildFile" != "" ]
            then
                modelArgs="$modelArgs -B $buildFile"
            fi
            ;;
        build)
            modelArgs="-B $buildFile"
            ;;
    esac
}

# Generates the proper combination of input model parameters that various
# expressions passed to nix-build take as inputs. You need to verify the kind of
# the deployment model first by invoking checkModels()

generateNixBuildArgs()
{
    case "$deploymentModel" in
        models)
            conversionArgs="--argstr servicesFile $(readlink -f $servicesFile) --argstr infrastructureFile $(readlink -f $infrastructureFile) --argstr distributionFile $(readlink -f $distributionFile)"

            if [ "$packagesFile" != "" ]
            then
                conversionArgs="$conversionArgs --argstr packagesFile $(readlink -f $packagesFile)"
            fi
            ;;
        packages)
            conversionArgs="--argstr packagesFile $(readlink -f $packagesFile) --argstr infrastructureFile $(readlink -f $infrastructureFile)"
            ;;
        architecture)
            conversionArgs="--argstr architectureFile $(readlink -f $architectureFile)"
            ;;
        build)
            conversionArgs="--argstr buildFile $(readlink -f $buildFile)"
            ;;
        deployment)
            conversionArgs="--argstr deploymentFile $(readlink -f $deploymentFile)"
            ;;
    esac
}

# Checks whether the --show-trace option is specified and sets the
# showTraceArg variable.

checkShowTrace()
{
    if [ "$showTrace" = "1" ]
    then
        showTraceArg="--show-trace"
    fi
}

# Checks whether the --no-out-link option is specified and sets the
# noOutLinkArg variable.

checkNoOutLink()
{
    if [ "$noOutLink" = "1" ]
    then
        noOutLinkArg="--no-out-link"
    fi
}

# Checks whether a target is given. Exits with status 1 if not set.

checkTarget()
{
    if [ "$target" = "" ]
    then
        echo "ERROR: A target address must be specified!" >&2
        exit 1
    fi
}

# Checks whether TMPDIR environment variable is set, if not it is set to
# a default value. It also creates the temp dir if needed.

checkTmpDir()
{
    if [ "$TMPDIR" = "" ]
    then
        export TMPDIR=/tmp
    fi

    mkdir -p "$TMPDIR"
}
