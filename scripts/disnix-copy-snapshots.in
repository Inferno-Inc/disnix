#!/bin/bash
set -e
set -o pipefail

# Disnix - A Nix-based distributed service deployment tool
# Copyright (C) 2008-2015  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 [OPTION] --from --target TARGET -c CONTAINER -C COMPONENT
  or: $0 [OPTION] --to --target TARGET -c CONTAINER -C COMPONENT

The command \`disnix-copy-snapshots' transfers the logical state (typically
represented as snapshots in a consistent and portable format) of a component
residing in a container from and to a remote machine through a Disnix interface.

Options:
      --to                   Copy snapshots to the given target
      --from                 Copy snapshots from the given target
  -t, --target=TARGET        Address of the Disnix service running on the remote
                             machine
  -c, --container=CONTAINER  Name of the container in which the mutable
                             component is deployed
  -C, --component=COMPONENT  Name of the mutable component to take snapshots from
      --all                  Transfer all snapshot generations instead of the
                             latest only
      --interface=INTERFACE  Path to executable that communicates with a Disnix
                             interface. Defaults to: disnix-ssh-client
  -h, --help                 Shows the usage of this command to the user
  -v, --version              Shows the version of this command to the user

Environment:

  DISNIX_CLIENT_INTERFACE    Sets the client interface (defaults to:
                             disnix-ssh-client)
  DYSNOMIA_STATEDIR          Specifies where the snapshots must be stored on the
                             coordinator machine (defaults to:
                             /var/state/dysnomia)
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2015 Sander van der Burg
EOF
}

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o t:C:c:hv -l to,from,container:,component:,all,target:,interface:,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        --to)
            to=1
            ;;
        --from)
            from=1
            ;;
        --all)
            all=1
            ;;
        -t|--target)
            target=$2
            ;;
        -C|--container)
            container=$2
            ;;
        -c|--component)
            component=$2
            ;;
        --interface)
            interface=$2
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
    esac
    
    shift
done

# Autoconf settings

export prefix=@prefix@

# Import checks

source @datadir@/@PACKAGE@/checks

# Validate the given options

if [ ! "$to" = "1" ] && [ ! "$from" = "1" ]
then
    echo "ERROR: Either the --from or --to option has to be used!" >&2
    exit 1
fi

checkTarget
checkClientInterface

if [ -z "$container" ]
then
    echo "ERROR: No container has been specified!" >&2
    exit 1
fi

if [ -z "$component" ]
then
    echo "ERROR: No component has been specified!" >&2
    exit 1
fi

checkTmpDir

# Execute operation

if [ "$to" = "1" ]
then
    if [ "$all" = "1" ]
    then
        snapshots=$(dysnomia-snapshots --query-all --container $container --component $component)
    else
        snapshots=$(dysnomia-snapshots --query-latest --container $container --component $component)
    fi
    
    for i in $snapshots
    do
        if [ "$($interface --target $target --print-missing-snapshots $i)" = "" ]
        then
            resolvedPath=$($interface --target $target --resolve-snapshots $i)
            $interface --target $target --import-snapshots --container $container --component $component --remotefile $resolvedPath
        else
            resolvedPath=$(dysnomia-snapshots --resolve $i)
            $interface --target $target --import-snapshots --container $container --component $component --localfile $resolvedPath
        fi
    done
else
    if [ "$all" = "1" ]
    then
        snapshots=$($interface --target $target --query-all-snapshots --container $container --component $component)
    else
        snapshots=$($interface --target $target --query-latest-snapshot --container $container --component $component)
    fi
    
    for i in $snapshots
    do
        if [ "$(dysnomia-snapshots --print-missing $i)" = "" ]
        then
            resolvedPath=$(dysnomia-snapshots --resolve $i)
            dysnomia-snapshots --import --container $container --component $component $resolvedPath
        else
            resolvedPath=$($interface --target $target --resolve-snapshots $i)
            tmpdir=$($interface --target $target --export-snapshots $resolvedPath)
            dysnomia-snapshots --import --container $container --component $component $tmpdir/* || (rm -Rf $tmpdir; false)
            rmdir $tmpdir
        fi
    done
fi
