#!/bin/bash
set -e
set -o pipefail
shopt -s nullglob

# Disnix - A Nix-based distributed service deployment tool
# Copyright (C) 2008-2015  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 -s services_nix -i infrastructure_nix -d distribution_nix [OPTION]

The command \`disnix-env' is used to install or upgrade a service-oriented
system in a given environment.

This command requires three Nix expressions as input parameters -- a services
model capturing the components of a distributed system and its
inter-dependencies, an infrastructure model capturing the machines in the
network and its properties and a distribution model which maps services to
machines.

By invoking this command, first all the services that are defined in the
distribution model are built from source code including all its dependencies. If
all the services are successfully built, the closures of the services are
transferred to the target machines in the network. Finally, the services are
activated by traversing the inter-dependency graph of all the services.

In case of a failure, a rollback is performed to bring the system back in its
previous configuration.

If there is already a distributed system configuration deployed, an upgrade is
performed. In this phase only the changed parts of the system are deactivated
and activated. In this process we also deal with the inter-dependencies so that
no services fails due to a missing inter-dependency.

Since the target machines could be of a different type or architecture as the
coordinator machine, we may not be able to build a specific service for the
given target machine. In such cases, \`disnix-env' also provides the option to
build the services on the target machines and to keep the build results for
future use.

Options:
  -s, --services=services_nix
                                  Services Nix expression which describes all
                                  components of the distributed system
  -i, --infrastructure=infrastructure_nix
                                  Infrastructure Nix expression which captures
                                  properties of machines in the network
  -d, --distribution=distribution_nix
                                  Distribution Nix expression which maps
                                  services to machines in the network
      --target-property=PROP      The target property of an infrastructure
                                  model, that specifies how to
      --deploy-state              Indicates whether to globally deploy state
                                  (disabled by default)
  -p, --profile=PROFILE           Name of the profile that is used for this
                                  system. Defaults to: default
  -m, --max-concurrent-transfers=NUM
                                  Maximum amount of concurrent closure
                                  transfers. Defauls to: 2
      --build-on-targets          Build the services on the target machines in
                                  the network instead of managing the build by
                                  the coordinator
      --coordinator-profile-path=PATH
                                  Path where to store the coordinator profile
                                  generations
      --no-upgrade                Do not perform an upgrade, but activate all
                                  services of the new configuration
      --no-lock                   Do not attempt to acquire and release any
                                  locks
      --no-coordinator-profile    Specifies that the coordinator profile should
                                  not be updated
      --no-target-profiles        Specifies that the target profiles should not
                                  be updated
      --no-delete-state           Do not remove the state of deactivated services
      --show-trace                Shows a trace of the output
  -h, --help                      Shows the usage of this command
  -v, --version                   Shows the version of this command

Environment:
  DISNIX_CLIENT_INTERFACE    Sets the client interface (defaults to:
                             disnix-ssh-client)
  DISNIX_TARGET_PROPERTY     Sets the target property of an infrastructure
                             model, that specifies how to connect to the remote
                             Disnix interface. (Defaults to: hostname)
  DISNIX_PROFILE             Sets the name of the profile that stores the
                             manifest on the coordinator machine and the
                             deployed services per machine on each target
                             (Defaults to: default).
  DISNIX_DEPLOY_STATE        If set to 1 it also deploys the state of all
                             components. (defaults to: 0)
  DISNIX_NO_DELETE_STATE     If set to 1 it does not delete the obsolete state
                             after upgrading. (defaults to: 0)
  DYSNOMIA_STATEDIR          Specifies where the snapshots must be stored on the
                             coordinator machine (defaults to: /var/dysnomia)
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2015 Sander van der Burg
EOF
}

# Displays a note indicating that the deployment failed

displayFailure()
{
    echo "[coordinator]: The deployment failed! Please inspect the output to diagnose any problems!" >&2
}

# Releases the locks

releaseLocks()
{
    if [ "$noLock" = "1" ]
    then
        echo "[coordinator]: Not releasing any locks..."
    else
        echo "[coordinator]: Releasing locks..."
        disnix-lock --unlock $profileArg $manifest
    fi
}

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o s:i:d:p:m:hv -l services:,infrastructure:,distribution:,interface:,target-property:,deploy-state,profile:,max-concurrent-transfers:,build-on-targets,coordinator-profile-path:,no-upgrade,no-lock,no-coordinator-profile,no-target-profiles,no-delete-state,show-trace,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)
            servicesFile=`readlink -f $2`
            ;;
        -i|--infrastructure)
            infrastructureFile=`readlink -f $2`
            ;;
        -d|--distribution)
            distributionFile=`readlink -f $2`
            ;;
        -m|--max-concurrent-transfers)
            maxConcurrentTransfersArg="-m $2"
            ;;
        --build-on-targets)
            buildOnTargets=1
            ;;
        --show-trace)
            showTrace=1
            ;;
        --interface)
            interface=$2
            ;;
        -p|--profile)
            profile=$2
            profileArg="--profile $2"
            ;;
        --coordinator-profile-path)
            coordinatorProfilePath=$2
            coordinatorProfilePathArg="--coordinator-profile-path $2"
            ;;
        --target-property)
            targetProperty=$2
            ;;
        --deploy-state)
            deployStateArg="--deploy-state"
            ;;
        --no-upgrade)
            noUpgradeArg="--no-upgrade"
            ;;
        --no-lock)
            noLock=1
            ;;
        --no-coordinator-profile)
            noCoordinatorProfileArg="--no-coordinator-profile"
            ;;
        --no-target-profiles)
            noTargetProfilesArg="--no-target-profiles"
            ;;
        --no-delete-state)
            noDeleteState=1
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
            ;;
    esac
    
    shift
done

# Autoconf settings

export prefix=@prefix@

# Import checks

source @datadir@/@PACKAGE@/checks

# Validate the given options

checkServicesFile
checkInfrastructureFile
checkDistributionFile
checkClientInterface
checkTargetProperty
checkShowTrace

if [ "$DISNIX_NO_DELETE_STATE" = "1" ]
then
    noDeleteState=1
fi

if [ "$profile" = "" ]
then
    if [ "$DISNIX_PROFILE" = "" ]
    then
        profile=default
    else
        profile=$DISNIX_PROFILE
    fi
fi

# Execute operations

if [ "$buildOnTargets" = "1" ]
then
    echo "[coordinator]: Instantiating store derivations..."
    distributedDerivation=`disnix-instantiate -s $servicesFile -i $infrastructureFile -d $distributionFile --target-property $targetProperty --interface $interface --no-out-link $showTraceArg`
    echo "[coordinator]: Building store derivations..."
    disnix-build $maxConcurrentTransfersArg $distributedDerivation
fi

echo "[coordinator]: Building manifest..."
manifest=`disnix-manifest -s $servicesFile -i $infrastructureFile -d $distributionFile --target-property $targetProperty --no-out-link --interface $interface $deployStateArg $showTraceArg`
echo "[coordinator]: Distributing intra-dependency closures..."
disnix-distribute $maxConcurrentTransfersArg $manifest

if [ "$noLock" = "1" ]
then
    echo "[coordinator]: Not acquiring any locks..."
else
    echo "[coordinator]: Acquiring locks..."
    disnix-lock $profileArg $manifest || (displayFailure; exit 1)
fi

echo "[coordinator]: Activating new configuration..."
disnix-activate $profileArg $coordinatorProfilePathArg $noUpgradeArg $manifest || (releaseLocks; displayFailure; exit 1)
echo "[coordinator]: Snapshotting state of annotated services..."
disnix-snapshot $profileArg $coordinatorProfilePathArg $noUpgradeArg $manifest || (releaseLocks; displayFailure; exit 1)
echo "[coordinator]: Restoring state of annotated services..."
disnix-restore $profileArg $coordinatorProfilePathArg $noUpgradeArg $manifest || (releaseLocks; displayFailure; exit 1)

# Memorize the last profile generation symlink

if [ "$coordinatorProfilePath" = "" ]
then
    previousGenerationManifest=$(echo @localstatedir@/nix/profiles/per-user/$(whoami)/disnix-coordinator/$profile-* | sort -V | tail -1)
else
    previousGenerationManifest=$(echo $coordinatorProfilePath/$profile-* | sort -V | tail -1)
fi

if [ "$noDeleteState" != "1" ] && [ "$previousGenerationManifest" != "" ]
then
    # Delete the obsolete state if an upgrade is performed
    echo "[coordinator]: Deleting obsolete state..."
    disnix-delete-state $profileArg $coordinatorProfilePathArg #$previousGenerationManifest
fi

echo "[coordinator]: Setting profiles..."
disnix-set $profileArg $coordinatorProfilePathArg $noCoordinatorProfileArg $noTargetProfilesArg $manifest || (releaseLocks; displayFailure; exit 1)
releaseLocks || (displayFailure; exit 1)

if [ "$noDeleteState" = "1" ] && [ "$previousGenerationManifest" != "" ]
then
    # If we don't want to delete state, but there has been an upgrade, notify the user
    cat <<EOF

NOTE: Deleting state has been disabled! This means that the state of services
that have been moved from one machine to another are copied, but not deleted
from their previous locations!

To actually remove the old obsolete state, run the following command:

$ disnix-delete-state $profileArg $coordinatorProfilePathArg $previousGenerationManifest

EOF
fi

echo "[coordinator]: The system has been successfully deployed!" >&2
