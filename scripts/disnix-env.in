#!/bin/bash
set -e
set -o pipefail
shopt -s nullglob

# Disnix - A Nix-based distributed service deployment tool
# Copyright (C) 2008-2018  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 -s services_nix -i infrastructure_nix -d distribution_nix [OPTION]
  or: $0 -A architecture_nix [OPTION]
  or: $0 --rollback [OPTION]
  or: $0 --switch-generation NUM [OPTION]
  or: $0 --list-generations [OPTION]
  or: $0 --delete-generations NUM [OPTION]
  or: $0 --delete-all-generations NUM [OPTION]

The command \`disnix-env' is used to install, upgrade, or roll back a
service-oriented system in a given environment.

This command requires three Nix expressions as input parameters -- a services
model capturing the components of a distributed system and its
inter-dependencies, an infrastructure model capturing the machines in the
network and its properties and a distribution model which maps services to
machines.

By invoking this command, first all the services that are defined in the
distribution model are built from source code including all its dependencies. If
all the services are successfully built, the closures of the services are
transferred to the target machines in the network. Finally, the services are
activated by traversing the inter-dependency graph of all the services.

In case of a failure, a rollback is performed to bring the system back in its
previous configuration.

If there is already a distributed system configuration deployed, an upgrade is
performed. In this phase only the changed parts of the system are deactivated
and activated. In this process we also deal with the inter-dependencies so that
no services fails due to a missing inter-dependency.

Since the target machines could be of a different type or architecture as the
coordinator machine, we may not be able to build a specific service for the
given target machine. In such cases, \`disnix-env' also provides the option to
build the services on the target machines and to keep the build results for
future use.

If state deployment has been enabled for a service and that particular service
has been moved from one machine to another, then a snapshot of the state is
taken, transferred to the new machine, and finally restored.

Options:
  -s, --services=services_nix
                                  Services Nix expression which describes all
                                  components of the distributed system
  -i, --infrastructure=infrastructure_nix
                                  Infrastructure Nix expression which captures
                                  properties of machines in the network
  -d, --distribution=distribution_nix
                                  Distribution Nix expression which maps
                                  services to machines in the network
  -A, --architecture=architecture_nix
                                  Deployment architecture Nix expression that
                                  captures all properties of the services and
                                  infrastructure including the distribution of
                                  services to targets
      --switch-to-generation=NUM  Switches to a specific profile generation
      --rollback                  Switches back to the previously deployed
                                  configuration
      --list-generations          Lists all profile generations of the current
                                  deployment
      --delete-generations=NUM    Deletes the specified generations. The number
                                  can correspond to generation numbers, days
                                  (d postfix) or 'old'.
      --delete-all-generations    Deletes all profile generations. This is
                                  useful when a deployment has been discarded
      --target-property=PROP      The target property of an infrastructure
                                  model, that specifies how to connect to the
                                  remote Disnix interface. (Defaults to
                                  hostname)
      --interface=INTERFACE       Path to executable that communicates with a
                                  Disnix interface. Defaults to:
                                  disnix-ssh-client
      --deploy-state              Indicates whether to globally deploy state
                                  (disabled by default)
  -p, --profile=PROFILE           Name of the profile that is used for this
                                  system. Defaults to: default
  -m, --max-concurrent-transfers=NUM
                                  Maximum amount of concurrent closure
                                  transfers. Defauls to: 2
      --build-on-targets          Build the services on the target machines in
                                  the network instead of managing the build by
                                  the coordinator
      --coordinator-profile-path=PATH
                                  Path where to store the coordinator profile
                                  generations
      --no-upgrade                Do not perform an upgrade, but activate all
                                  services of the new configuration
      --no-lock                   Do not attempt to acquire and release any
                                  locks
      --no-coordinator-profile    Specifies that the coordinator profile should
                                  not be updated
      --no-target-profiles        Specifies that the target profiles should not
                                  be updated
      --no-migration              Do not migrate the state of services from one
                                  machine to another, even if they have been
                                  annotated as such
      --delete-state              Remove the obsolete state of deactivated
                                  services
      --depth-first               Snapshots components depth-first as opposed to
                                  breadth-first. This approach is more space
                                  efficient, but slower.
      --keep=NUM                  Amount of snapshot generations to keep.
                                  Defaults to: 1

      --show-trace                Shows a trace of the output
  -h, --help                      Shows the usage of this command
  -v, --version                   Shows the version of this command

Environment:
  DISNIX_CLIENT_INTERFACE    Sets the client interface (defaults to:
                             disnix-ssh-client)
  DISNIX_TARGET_PROPERTY     Sets the target property of an infrastructure
                             model, that specifies how to connect to the remote
                             Disnix interface. (Defaults to: hostname)
  DISNIX_PROFILE             Sets the name of the profile that stores the
                             manifest on the coordinator machine and the
                             deployed services per machine on each target
                             (Defaults to: default).
  DISNIX_DEPLOY_STATE        If set to 1 it also deploys the state of all
                             components. (defaults to: 0)
  DISNIX_DELETE_STATE        If set to 1 it automatically deletes the obsolete
                             state after upgrading. (defaults to: 0)
  DYSNOMIA_STATEDIR          Specifies where the snapshots must be stored on the
                             coordinator machine (defaults to:
                             /var/state/dysnomia)
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2018 Sander van der Burg
EOF
}

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o s:i:d:A:p:m:hv -l services:,infrastructure:,distribution:,architecture:,rollback,switch-to-generation:,list-generations,delete-generations:,delete-all-generations,interface:,target-property:,deploy-state,profile:,max-concurrent-transfers:,build-on-targets,coordinator-profile-path:,no-upgrade,no-lock,no-coordinator-profile,no-target-profiles,no-migration,delete-state,depth-first,keep:,show-trace,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)
            servicesFile=`readlink -f $2`
            ;;
        -i|--infrastructure)
            infrastructureFile=`readlink -f $2`
            ;;
        -d|--distribution)
            distributionFile=`readlink -f $2`
            ;;
        -A|--architecture)
            architectureFile=`readlink -f $2`
            operation="deployArchitecture"
            ;;
        --rollback)
            operation="switchGenerations"
            ;;
        --switch-to-generation)
            operation="switchGenerations"
            generationId=$2
            ;;
        --list-generations)
            operation="listGenerations"
            ;;
        --delete-generations)
            operation="deleteGenerations"
            generations="$2"
            ;;
        --delete-all-generations)
            operation="deleteAllGenerations"
            ;;
        -m|--max-concurrent-transfers)
            maxConcurrentTransfersArg="-m $2"
            ;;
        --build-on-targets)
            buildOnTargets=1
            ;;
        --show-trace)
            showTrace=1
            ;;
        --interface)
            interface=$2
            ;;
        -p|--profile)
            profile=$2
            profileArg="--profile $2"
            ;;
        --coordinator-profile-path)
            coordinatorProfilePath=$2
            coordinatorProfilePathArg="--coordinator-profile-path $2"
            ;;
        --target-property)
            targetProperty=$2
            ;;
        --deploy-state)
            deployStateArg="--deploy-state"
            ;;
        --no-upgrade)
            noUpgradeArg="--no-upgrade"
            ;;
        --no-lock)
            noLockArg="--no-lock"
            ;;
        --no-coordinator-profile)
            noCoordinatorProfileArg="--no-coordinator-profile"
            ;;
        --no-target-profiles)
            noTargetProfilesArg="--no-target-profiles"
            ;;
        --no-migration)
            noMigrationArg="--no-migration"
            ;;
        --delete-state)
            deleteStateArg="--delete-state"
            ;;
        --depth-first)
            depthFirstArg="--depth-first"
            ;;
        --keep)
            keepArg="--keep $2"
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
            ;;
    esac

    shift
done

# Autoconf settings

export prefix=@prefix@

# Import checks

source @datadir@/@PACKAGE@/checks

# Validate the given options

checkClientInterface
checkTargetProperty
checkProfile
checkShowTrace

if [ "$DISNIX_DELETE_STATE" = "1" ]
then
    deleteStateArg="--delete-state"
fi

if [ "$coordinatorProfilePath" = "" ]
then
    profileDir="@localstatedir@/nix/profiles/per-user/$(whoami)/disnix-coordinator"
else
    profileDir="$coordinatorProfilePath"
fi

# Operation functions

checkModels()
{
    checkServicesFile
    checkInfrastructureFile
    checkDistributionFile
}

switchGenerations()
{
    # If no generation link has been requested, figure out what the previous one is
    if [ "$generationId" = "" ]
    then
        if [ -d "$profileDir" ] && [ "$(echo $profileDir/$profile-*-link)" != "" ] && [ "$(ls $profileDir/$profile-*-link | wc -l)" -gt 1 ]
        then
            generation="$(basename $(ls $profileDir/$profile-*-link | sort -V | tail -2 | head -1))"
        else
            echo "[coordinator]: Unable to roll back as there are no known previous deployments!" >&2
            exit 1
        fi
    else
        generation="$profile-$generationId-link"
    fi

    if [ -e "$profileDir/$generation" ]
    then
        # Retrieve the manifest of the requested profile generation
        manifest=`readlink -f $profileDir/$generation`
    else
        echo "[coordinator]: Cannot switch profile generations, because the requested profile does not exist!" >&2
        exit 1
    fi
}

listGenerations()
{
    nix-env -p $profileDir/$profile --list-generations
}

deleteGenerations()
{
    nix-env -p $profileDir/$profile --delete-generations "$generations"
}

deleteAllGenerations()
{
    rm -f $profileDir/$profile
    rm -f $profileDir/$profile-*-link
}

produceManifest()
{
    if [ "$buildOnTargets" = "1" ]
    then
        disnix-delegate -s $servicesFile -i $infrastructureFile -d $distributionFile --target-property $targetProperty --interface $interface $maxConcurrentTransfersArg $showTraceArg
    fi

    echo "[coordinator]: Building manifest..."
    manifest=`disnix-manifest -s $servicesFile -i $infrastructureFile -d $distributionFile --target-property $targetProperty --no-out-link --interface $interface $deployStateArg $showTraceArg`
}

produceManifestFromArchitecture()
{
    if [ "$buildOnTargets" = "1" ]
    then
        disnix-delegate -A $architectureFile --target-property $targetProperty --interface $interface $maxConcurrentTransfersArg $showTraceArg
    fi

    echo "[coordinator]: Building manifest..."
    manifest=`disnix-manifest -A $architectureFile --target-property $targetProperty --no-out-link --interface $interface $deployStateArg $showTraceArg`
}

deploy()
{
    # Determine the name of the previous manifest file
    if [ -d "$profileDir" ] && [ "$(echo $profileDir/$profile-*-link)" != "" ]
    then
        oldManifestArg="-o $(ls $profileDir/$profile-*-link | sort -V | tail -1)"
    fi

    # Deploy the (pre)built Disnix configuration (implying a manifest file)
    disnix-deploy $maxConcurrentTransfersArg $noLockArg $profileArg $noUpgradeArg $deleteStateArg $noCoordinatorProfileArg $coordinatorProfilePathArg $noTargetProfilesArg $noMigrationArg $oldManifestArg $depthFirstArg $keepArg $manifest
}

# Execute operations

case "$operation" in
    switchGenerations)
        switchGenerations
        deploy
        ;;
    listGenerations)
        listGenerations
        ;;
    deleteGenerations)
        deleteGenerations
        ;;
    deleteAllGenerations)
        deleteAllGenerations
        ;;
    deployArchitecture)
        produceManifestFromArchitecture
        deploy
        ;;
    *)
        checkModels
        produceManifest
        deploy
        ;;
esac
