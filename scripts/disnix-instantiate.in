#!/bin/bash -e

# Shows the usage of this command to the user

showUsage()
{
    echo "Usage: $0 -s services_expr -i infrastructure_expr -d distribution_expr [options]"
    echo "Options:"
    echo
    echo "-s,--services       Services Nix expression which describes all components of the distributed system"
    echo "-i,--infrastructure Infrastructure Nix expression which captures properties of machines in the network"
    echo "-d,--distribution   Distribution Nix expression which maps services to machines in the network"
    echo "-m,--method         Sets the transition method of the deployment. \"distribution\""
    echo "                    builds services on the coordinator machine, \"compilation\" builds services on the target machines."
    echo "                    Defauls to \"distribution\""
    echo "--show-trace        Shows a trace of the output"
    echo "-h,--help           Shows the usage of this command"
}

# Autoconf settings

export prefix=@prefix@

# Parse valid argument options

PARAMS=`getopt -n $0 -o s:i:d:m:h -l services:,infrastructure:,distribution:,method:,show-trace,help -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

eval set -- "$PARAMS"

# Evaluate valid options

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)	    
	    servicesFile=`readlink -f $2`
	    ;;
	-i|--infrastructure)
	    infrastructureFile=`readlink -f $2`
	    ;;
	-d|--distribution)
	    distributionFile=`readlink -f $2`
	    ;;
	-m|--method)
	    method=$2
	    ;;
	--show-trace)
	    showTrace=1
	    ;;
	-h|--help)
	    showUsage
	    exit 0
	    ;;
    esac
    
    shift
done

# Validate the given options

if [ "$servicesFile" = "" ]
then
    echo "ERROR: A services expression must be specified!" >&2
    exit 1
fi

if [ "$infrastructureFile" = "" ]
then
    echo "ERROR: A infrastructure expression must be specified!" >&2
    exit 1
fi

if [ "$distributionFile" = "" ]
then
    echo "ERROR: A distribution expression must be specified!" >&2
    exit 1
fi

case "$method" in
    distribution|"")
        serviceProperty="outPath";
        ;;
    compilation)
        serviceProperty="drvPath";
        ;;
    *)
        echo "ERROR: Transition method should be either \"distribution\" or \"compilation\""
        exit 1
        ;;
esac

if [ "$showTrace" = "1" ]
then
    showTraceArg="--show-trace"
fi

# Generate Nix expression

exportExpr=`readlink -f @datadir@/@PACKAGE@/export.nix`
tmpfilename=`mktemp -p /tmp`

cat > $tmpfilename <<EOF
rec {
  servicesFile = $servicesFile;
  infrastructureFile = $infrastructureFile;
  distributionFile = $distributionFile;
  
  serviceProperty = "$serviceProperty";
  
  pkgs = import (builtins.getEnv "NIXPKGS_ALL") {};
  
  export = import $exportExpr {
    inherit servicesFile infrastructureFile distributionFile;
    inherit serviceProperty;
    targetProperty = "hostname";
    inherit (pkgs) stdenv;
  };
}
EOF

# Instantiate the expression
nix-instantiate $showTraceArg $tmpfilename

# Remove the generated Nix expression
rm -f $tmpfilename
