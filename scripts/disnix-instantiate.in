#!/bin/bash
set -e
set -o pipefail

# Disnix - A Nix-based distributed service deployment tool
# Copyright (C) 2008-2018  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 -s services_nix -i infrastructure_nix -d distribution_nix [OPTION]
  or: $0 -P packages_nix -i infrastructure_nix [OPTION]
  or: $0 -A architecture_nix [OPTION]

The command \`disnix-instantiate' generates a distributed derivation file from
a service, infrastructure and distribution Nix expression, which can be used to
build the services on the target machines from source code by using the
\`disnix-build' command.

Most users and developers don't need to use this command directly. The command
\`disnix-env' performs instantiation of a distributed derivation automatically.
It is mostly used for debugging purposes or to perform certain tasks manually.

Options:
  -s, --services=services_nix
                              Services Nix expression which describes all
                              components of the distributed system
  -i, --infrastructure=infrastructure_nix
                              Infrastructure Nix expression which captures
                              properties of machines in the network
  -d, --distribution=distribution_nix
                              Distribution Nix expression which maps services to
                              machines in the network
  -P, --packages=packages_nix
                              Packages Nix expression specifying the packages
                              that should be deployed in a Nix profile mapped
                              to each machine in the network
  -A, --architecture=architecture_nix
                              Deployment architecture Nix expression that
                              captures all properties of the services and
                              infrastructure including the distribution of
                              services to targets
  -B, --build=build_nix
                              Build Nix expression that maps store derivations
                              to target machines in the network
      --target-property=PROP  The target property of an infrastructure model,
                              that specifies how to connect to the remote Disnix
                              interface. (Defaults to: hostname)
      --interface=INTERFACE   Path to executable that communicates with a Disnix
                              interface. Defaults to: disnix-ssh-client
      --no-out-link           Do not create a 'result' symlink
      --show-trace            Shows a trace of the output
  -h, --help                  Shows the usage of this command to the user
  -v, --version               Shows the version of this command to the user

Environment:
  DISNIX_CLIENT_INTERFACE    Sets the client interface (defaults to:
                             disnix-ssh-client)
  DISNIX_TARGET_PROPERTY     Sets the target property of an infrastructure
                             model, that specifies how to connect to the remote
                             Disnix interface. (Defaults to: hostname)
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2018 Sander van der Burg
EOF
}

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o s:i:d:P:A:B:hv -l services:,infrastructure:,distribution:,packages:,architecture:,build:,target-property:,interface:,no-out-link,show-trace,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)
            servicesFile=`readlink -f $2`
            ;;
        -i|--infrastructure)
            infrastructureFile=`readlink -f $2`
            ;;
        -d|--distribution)
            distributionFile=`readlink -f $2`
            ;;
        -P|--packages)
            packagesFile=`readlink -f $2`
            ;;
        -A|--architecture)
            architectureFile=`readlink -f $2`
            ;;
        -B|--build)
            buildFile=`readlink -f $2`
            ;;
        --target-property)
            targetProperty=$2
            ;;
        --interface)
            interface=$2
            ;;
        --no-out-link)
            noOutLink=1
            ;;
        --show-trace)
            showTrace=1
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
            ;;
    esac

    shift
done

# Autoconf settings

export prefix=@prefix@

# Import checks

source @datadir@/@PACKAGE@/checks

# Validate the given options

checkBuildModels
checkTargetProperty
checkClientInterface
checkNoOutLink
checkShowTrace

# Build the distributed derivation file

generateNixBuildArgs

case "$deploymentModel" in
    models)
        conversionArgs="$conversionArgs -A generateDistributedDerivationFromModels"
        ;;
    packages)
        conversionArgs="$conversionArgs -A generateDistributedDerivationFromModels"
        ;;
    architecture)
        conversionArgs="$conversionArgs -A generateDistributedDerivationFromArchitectureModel"
        ;;
    build)
        conversionArgs="$conversionArgs -A generateDistributedDerivationFromBuildModel"
        ;;
esac

nix-build --argstr targetProperty $targetProperty \
    --argstr clientInterface $interface \
    $noOutLinkArg \
    $showTraceArg \
    $conversionArgs \
    "$(readlink -f @datadir@/@PACKAGE@/instantiate.nix)"
