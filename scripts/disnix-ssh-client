#!/bin/bash -e

showUsage()
{
    echo "Usage:"
    echo "$0 --import [--localfile|--remotefile] derivations"
    echo "$0 --export [--localfile|--remotefile] derivations"
    echo "$0 --print-invalid derivations"
    echo "$0 {-r|--realise} derivations"
    echo "$0 --set [{-p|--profile} name] derivation"
    echo "$0 {-q|--query-installed} [{-p|--profile} name]"
    echo "$0 --query-requisites derivations"
    echo "$0 --collect-garbage [{-d|--delete-old}]\n"
    echo "$0 --activate --type type --arguments arguments derivation"
    echo "$0 --deactivate --type type --arguments arguments derivation"
    echo "$0 --lock"
    echo "$0 --unlock"
    echo "$0 {-h | --help}"
}

# Parse valid argument options

PARAMS=`getopt -n $0 -o rqp:d -l import,export,print-invalid,realise,set,query-installed,query-requisites,collect-garbage,activate,deactivate,lock,unlock,target:,localfile,remotefile,profile:,delete-old,type:,arguments:,help -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

eval set -- "$PARAMS"

# Evaluate valid options

while [ "$1" != "--" ]
do
    case "$1" in
        --import)
	    operation="import";
	    ;;
	--export)
	    operation="export";
	    ;;
	--print-invalid)
	    operation="print-invalid";
	    ;;
	-r|--realise)
	    operation="realise";
	    ;;
	--set)
	    operation="set";
	    ;;
	-q|--query-installed)
	    operation="query-installed";
	    ;;
	--query-requisites)
	    operation="query-requisites";
	    ;;
	--collect-garbage)
	    operation="collect-garbage";
	    ;;
	--activate)
	    operation="activate";
	    path=$2
	    ;;
	--deactivate)
	    operation="deactivate";
	    path=$2
	    ;;
	--lock)
	    operation="lock";
	    path=$2
	    ;;
	--unlock)
	    operation="unlock";
	    path=$2
	    ;;
	--target)
	    target=$2
	    ;;
	--localfile)
	    localfile=1
	    ;;
	--remotefile)
	    remotefile=1
	    ;;
	-p|--profile)
	    profileArg="--profile $2"
	    ;;
	-d|--delete-old)
	    deleteOldArg="-d"
	    ;;
	--type)
	    type=$2
	    ;;
	--arguments)
	    argsArg="--arguments \"$2\""
	    ;;
	-h|--help)
	    showUsage
	    exit 0
	    ;;
    esac
    
    shift
done

shift

# Validate the given options

if [ "$target" = "" ]
then
    echo "ERROR: A target hostname or IP address must be specified!" >&2
    exit 1
fi

targetHostname=${target%%:*}
targetPort=${target#*:}

if [ "$targetPort" = "$targetHostname" ]
then
    targetPort=22
fi

# Execute selected operation

case "$operation" in
    import)
	if [ "$localfile" != "1" ] && [ "$remotefile" != "1" ]
	then
	    echo "ERROR: Either a remote or a localfile must be specified!" >&2
	    exit 1
	fi
	
	# A localfile must first be transferred
	if [ "$localfile" != "" ]
	then
	    scp -P $targetPort $SSH_OPTS "$@" $targetHostname:/tmp/out.closure # Preferably we should use mktemp for the filename
	    remotefile=/tmp/out.closure
	fi
	
	# Import the closure into the Nix store
	ssh -p $targetPort $SSH_OPTS $targetHostname disnix-client --import $remotefile
	;;
    export)
	if [ "$localfile" != "1" ] && [ "$remotefile" != "1" ]
	then
	    echo "ERROR: Either a remote or a localfile must be specified!" >&2
	    exit 1
	fi

	closure=`ssh -p $targetPort $SSH_OPTS $targetHostname disnix-client --export $remotefile`
	
	# A remote file must be downloaded afterwards
	if [ "$remotefile" = "1" ]
	then
	    localClosure=`mktemp -p /tmp`
	    scp -P $targetPort $SSH_OPTS $targetHostname:$closure $localClosure
	    echo $localClosure
	fi
        ;;
    print-invalid)
	ssh -p $targetPort $SSH_OPTS $targetHostname disnix-client --print-invalid "$@"
	;;
    realise)
        ssh -p $targetPort $SSH_OPTS $targetHostname disnix-client --realise "$@"
        ;;
    set)
        ssh -p $targetPort $SSH_OPTS $targetHostname disnix-client $profileArg --set "$@"
        ;;
    query-installed)
        ssh -p $targetPort $SSH_OPTS $targetHostname disnix-client $profileArg --query-installed "$@"
        ;;
    query-requisites)
        ssh -p $targetPort $SSH_OPTS $targetHostname disnix-client --query-requisites "$@"
        ;;
    collect-garbage)
        ssh -p $targetPort $SSH_OPTS $targetHostname disnix-client --collect-garbage $deleteOldArg "$@"
        ;;
    activate)
	if [ "$type" = "" ]
	then
	    echo "ERROR: A type must be specified!" >&2
	    exit 1
	fi
	
	ssh -p $targetPort $SSH_OPTS $targetHostname disnix-client --type $type $argsArg --activate "$@"
	;;
    deactivate)
	if [ "$type" = "" ]
	then
	    echo "ERROR: A type must be specified!" >&2
	    exit 1
	fi
	
	ssh -p $targetPort $SSH_OPTS $targetHostname disnix-client --type $type $argsArg --deactivate "$@"
	;;
    lock)
        ssh -p $targetPort $SSH_OPTS $targetHostname disnix-client --lock
        ;;
    unlock)
        ssh -p $targetPort $SSH_OPTS $targetHostname disnix-client --unlock
        ;;
esac
