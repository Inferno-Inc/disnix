#!/bin/bash
set -e
set -o pipefail
shopt -s nullglob

# Disnix - A Nix-based distributed service deployment tool
# Copyright (C) 2008-2016  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 [OPTION] MANIFEST

The command \`disnix-migrate' is used to snapshot, transfer and restore the
state of services that have been moved from one machine to another.

Most users don't need to use this command directly. The \`disnix-env' command
will automatically invoke this command to activate the new configuration.

Options:
      -o, --old-manifest=MANIFEST Nix profile path where the manifest should be
                                  stored, so that Disnix knows the current
                                  configuration of a distributed system. By
                                  default it is stored in the profile directory
                                  of the user.
      --target-property=PROP      The target property of an infrastructure
                                  model, that specifies how to connect to the
                                  remote Disnix interface. (Defaults to
                                  hostname)
      --deploy-state              Indicates whether to globally deploy state
                                  (disabled by default)
  -p, --profile=PROFILE           Name of the profile that is used for this
                                  system. Defaults to: default
  -m, --max-concurrent-transfers=NUM
                                  Maximum amount of concurrent closure
                                  transfers. Defauls to: 2
      --coordinator-profile-path=PATH
                                  Path where to store the coordinator profile
                                  generations
      --no-upgrade                Do not perform an upgrade, but activate all
                                  services of the new configuration
      --no-lock                   Do not attempt to acquire and release any
                                  locks
      --no-coordinator-profile    Specifies that the coordinator profile should
                                  not be updated
      --no-target-profiles        Specifies that the target profiles should not
                                  be updated
      --no-migration              Do not migrate the state of services from one
                                  machine to another, even if they have been
                                  annotated as such
      --no-delete-state           Do not remove the state of deactivated services
      --show-trace                Shows a trace of the output
  -h, --help                      Shows the usage of this command
  -v, --version                   Shows the version of this command

Environment:
  DISNIX_PROFILE             Sets the name of the profile that stores the
                             manifest on the coordinator machine and the
                             deployed services per machine on each target
                             (Defaults to: default).
  DISNIX_DEPLOY_STATE        If set to 1 it also deploys the state of all
                             components. (defaults to: 0)
  DISNIX_NO_DELETE_STATE     If set to 1 it does not delete the obsolete state
                             after upgrading. (defaults to: 0)
  DYSNOMIA_STATEDIR          Specifies where the snapshots must be stored on the
                             coordinator machine (defaults to:
                             /var/state/dysnomia)
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2016 Sander van der Burg
EOF
}

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o o:p:m:hv -l old-manifest:,interface:,target-property:,deploy-state,profile:,max-concurrent-transfers:,coordinator-profile-path:,no-upgrade,no-lock,no-coordinator-profile,no-target-profiles,no-migration,no-delete-state,show-trace,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        -o|--old-manifest)
            oldManifestFile=$2
            ;;
        -m|--max-concurrent-transfers)
            maxConcurrentTransfersArg="-m $2"
            ;;
        --show-trace)
            showTrace=1
            ;;
        --interface)
            interface=$2
            ;;
        -p|--profile)
            profileArg="--profile $2"
            ;;
        --coordinator-profile-path)
            coordinatorProfilePath=$2
            coordinatorProfilePathArg="--coordinator-profile-path $2"
            ;;
        --target-property)
            targetProperty=$2
            ;;
        --deploy-state)
            deployStateArg="--deploy-state"
            ;;
        --no-upgrade)
            noUpgradeArg="--no-upgrade"
            noUpgrade=1
            ;;
        --no-lock)
            noLock=1
            ;;
        --no-coordinator-profile)
            noCoordinatorProfileArg="--no-coordinator-profile"
            ;;
        --no-target-profiles)
            noTargetProfilesArg="--no-target-profiles"
            ;;
        --no-migration)
            noMigration=1
            ;;
        --no-delete-state)
            noDeleteState=1
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
            ;;
    esac
    
    shift
done

# Evaluate non-options

shift
manifest=$1

# Autoconf settings

export prefix=@prefix@

# Import checks

source @datadir@/@PACKAGE@/checks

# Validate the given options

checkShowTrace

if [ "$DISNIX_NO_DELETE_STATE" = "1" ]
then
    noDeleteState=1
fi

# Execute operations

echo "[coordinator]: Snapshotting state of annotated services..."
disnix-snapshot $profileArg $coordinatorProfilePathArg $noUpgradeArg $manifest
echo "[coordinator]: Restoring state of annotated services..."
disnix-restore $profileArg $coordinatorProfilePathArg $noUpgradeArg $manifest

if [ "$noDeleteState" != "1" ] && [ "$noUpgrade" != "1" ] && [ "$oldManifestFile" != "" ]
then
    # Delete the obsolete state if an upgrade is performed
    echo "[coordinator]: Deleting obsolete state..."
    disnix-delete-state $profileArg $coordinatorProfilePathArg
fi
