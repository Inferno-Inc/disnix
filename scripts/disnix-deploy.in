#!/bin/bash
set -e
set -o pipefail
shopt -s nullglob

# Disnix - A Nix-based distributed service deployment tool
# Copyright (C) 2008-2018  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 [OPTION] MANIFEST

The command \`disnix-deploy' is used to install, upgrade, or roll back a
service-oriented system in a given environment from a prebuilt Disnix
configuration (a manifest file), that has been built with \`disnix-manifest'.

A deployment process consists of the following activities: first it copies the
intra-dependency closures of the services to the target machines in the network.
Finally, the services are activated by traversing the inter-dependency graph of
all the services.

In case of a failure, a rollback is performed to bring the system back in its
previous configuration.

If there is already a distributed system configuration deployed, an upgrade is
performed. In this phase only the changed parts of the system are deactivated
and activated. In this process we also deal with the inter-dependencies so that
no services fails due to a missing inter-dependency.

If state deployment has been enabled for a service and that particular service
has been moved from one machine to another, then a snapshot of the state is
taken, transferred to the new machine, and finally restored.

Most users don't need to use this command directly. The \`disnix-env' command
will automatically invoke this command to activate the new configuration.

Options:
  -o, --old-manifest=MANIFEST     Nix profile path where the manifest should be
                                  stored, so that Disnix knows the current
                                  configuration of a distributed system. By
                                  default it is stored in the profile directory
                                  of the user.
      --deploy-state              Indicates whether to globally deploy state
                                  (disabled by default)
  -p, --profile=PROFILE           Name of the profile that is used for this
                                  system. Defaults to: default
  -m, --max-concurrent-transfers=NUM
                                  Maximum amount of concurrent closure
                                  transfers. Defauls to: 2
      --coordinator-profile-path=PATH
                                  Path where to store the coordinator profile
                                  generations
      --no-upgrade                Do not perform an upgrade, but activate all
                                  services of the new configuration
      --no-lock                   Do not attempt to acquire and release any
                                  locks
      --no-coordinator-profile    Specifies that the coordinator profile should
                                  not be updated
      --no-target-profiles        Specifies that the target profiles should not
                                  be updated
      --no-migration              Do not migrate the state of services from one
                                  machine to another, even if they have been
                                  annotated as such
      --delete-state              Remove the obsolete state of deactivated
                                  services
      --depth-first               Snapshots components depth-first as opposed to
                                  breadth-first. This approach is more space
                                  efficient, but slower.
      --keep=NUM                  Amount of snapshot generations to keep.
                                  Defaults to: 1
  -h, --help                      Shows the usage of this command
  -v, --version                   Shows the version of this command

Environment:
  DISNIX_PROFILE             Sets the name of the profile that stores the
                             manifest on the coordinator machine and the
                             deployed services per machine on each target
                             (Defaults to: default).
  DISNIX_DEPLOY_STATE        If set to 1 it also deploys the state of all
                             components. (defaults to: 0)
  DISNIX_DELETE_STATE        If set to 1 it automatically deletes the obsolete
                             state after upgrading. (defaults to: 0)
  DYSNOMIA_STATEDIR          Specifies where the snapshots must be stored on the
                             coordinator machine (defaults to:
                             /var/state/dysnomia)
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2018 Sander van der Burg
EOF
}

# Releases the locks

releaseLocks()
{
    if [ "$noLock" = "1" ]
    then
        echo "[coordinator]: Not releasing any locks..."
    else
        echo "[coordinator]: Releasing locks..."
        disnix-lock --unlock $profileArg $coordinatorProfilePathArg $manifest
    fi
}

# Displays a note indicating that the deployment failed

displayFailure()
{
    echo "[coordinator]: The deployment failed! Please inspect the output to diagnose any problems!" >&2
}

# Displays a note indicating that data migration has failed and provide the
# caller some notes on how to resolve it.

displayStateFailure()
{
    cat <<EOF

The problem is a data migration issue, which must be manually diagnosed. To
attempt migrating the data again, run:

$ disnix-migrate $profileArg $coordinatorProfilePathArg $noUpgradeArg $deleteStateArg $oldManifestFileArg $manifest

If all problems have been resolved, the deployment must be made final. To
accomplish this, run:

$ disnix-set $profileArg $coordinatorProfilePathArg $noCoordinatorProfileArg $noTargetProfilesArg $manifest

EOF
}

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o o:p:m:hv -l old-manifest:,deploy-state,profile:,max-concurrent-transfers:,coordinator-profile-path:,no-upgrade,no-lock,no-coordinator-profile,no-target-profiles,no-migration,delete-state,depth-first,keep:,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        -o|--old-manifest)
            oldManifestFile=$2
            oldManifestFileArg="-o $2"
            ;;
        -m|--max-concurrent-transfers)
            maxConcurrentTransfersArg="-m $2"
            ;;
        -p|--profile)
            profileArg="--profile $2"
            ;;
        --coordinator-profile-path)
            coordinatorProfilePathArg="--coordinator-profile-path $2"
            ;;
        --deploy-state)
            deployStateArg="--deploy-state"
            ;;
        --no-upgrade)
            noUpgradeArg="--no-upgrade"
            ;;
        --no-lock)
            noLock=1
            ;;
        --no-coordinator-profile)
            noCoordinatorProfileArg="--no-coordinator-profile"
            ;;
        --no-target-profiles)
            noTargetProfilesArg="--no-target-profiles"
            ;;
        --no-migration)
            noMigration=1
            ;;
        --delete-state)
            deleteState=1
            deleteStateArg="--delete-state"
            ;;
        --depth-first)
            depthFirstArg="--depth-first"
            ;;
        --keep)
            keepArg="--keep $2"
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
            ;;
    esac
    
    shift
done

# Evaluate non-options

shift
manifest=$1

# Autoconf settings

export prefix=@prefix@

# Import checks

source @datadir@/@PACKAGE@/checks

# Validate the given options

if [ "$DISNIX_DELETE_STATE" = "1" ]
then
    deleteState=1
    deleteStateArg="--delete-state"
fi

# Execute operations

echo "[coordinator]: Distributing intra-dependency closures..."
disnix-distribute $maxConcurrentTransfersArg $manifest

if [ "$noLock" = "1" ]
then
    echo "[coordinator]: Not acquiring any locks..."
else
    echo "[coordinator]: Acquiring locks..."
    disnix-lock $profileArg $coordinatorProfilePathArg $manifest || (displayFailure; exit 1)
fi

echo "[coordinator]: Activating new configuration..."
disnix-activate $profileArg $coordinatorProfilePathArg $noUpgradeArg $manifest || (releaseLocks; displayFailure; exit 1)

if [ "$noMigration" != "1" ]
then
    echo "[coordinator]: Migrating data..."
    disnix-migrate $profileArg $coordinatorProfilePathArg $noUpgradeArg $deleteStateArg $oldManifestFileArg $depthFirstArg $keepArg $manifest || (releaseLocks; displayStateFailure; exit 1)
fi

echo "[coordinator]: Setting profiles..."
disnix-set $profileArg $coordinatorProfilePathArg $noCoordinatorProfileArg $noTargetProfilesArg $manifest || (releaseLocks; displayFailure; exit 1)
releaseLocks || (displayFailure; exit 1)

if [ "$deleteState" != "1" ] && [ "$oldManifestFile" != "" ]
then
    # If we don't want to delete state, but there has been an upgrade, notify the user
    cat <<EOF

NOTE: Deleting state has been disabled! This means that the state of the
services that have been moved from one machine to another were copied, but not
deleted from their previous locations!

To actually remove the old obsolete state, run the following command:

$ disnix-delete-state $profileArg $coordinatorProfilePathArg $oldManifestFile

EOF
fi

echo "[coordinator]: The system has been successfully deployed!" >&2
