#!/bin/bash -e

# Shows the usage of this command to the user

showUsage()
{
    echo "Usage: $0 -s services_expr -i infrastructure_expr"
    echo "Options:"
    echo
    echo "-s,--services       Services Nix expression which describes all components of the distributed system"
    echo "-i,--infrastructure Infrastructure Nix expression which captures properties of machines in the network"
    echo "-h,--help           Shows the usage of this command"
}

# Autoconf settings

export prefix=@prefix@

# Parse valid argument options

PARAMS=`getopt -n $0 -o s:i:h -l services:,infrastructure:,help -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

eval set -- "$PARAMS"

# Evaluate valid options

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)	    
	    servicesFile=`readlink -f $2`
	    ;;
	-i|--infrastructure)
	    infrastructureFile=`readlink -f $2`
	    ;;
	-h|--help)
	    showUsage
	    exit 0
	    ;;
    esac
    
    shift
done

# Validate the given options

if [ "$servicesFile" = "" ]
then
    echo "ERROR: A services expression must be specified!" >&2
    exit 1
fi

if [ "$infrastructureFile" = "" ]
then
    echo "ERROR: A infrastructure expression must be specified!" >&2
    exit 1
fi

# Generate Nix expression

generateDistributionExpr=`readlink -f @datadir@/@PACKAGE@/generatedistribution.nix`
tmpfilename=`mktemp -p /tmp`

cat > $tmpfilename <<EOF
rec {
  servicesFile = $servicesFile;
  infrastructureFile = $infrastructureFile;
  
  pkgs = import (builtins.getEnv "NIXPKGS_ALL") {};
  
  export = import $generateDistributionExpr {
    inherit servicesFile infrastructureFile;
    inherit (pkgs) stdenv;
  };
}
EOF

# Build the distribution model
nix-build $tmpfilename

# Remove the generated Nix expression
rm -f $tmpfilename
