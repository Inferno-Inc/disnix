#!/bin/bash
set -e
set -o pipefail

# Disnix - A Nix-based distributed service deployment tool
# Copyright (C) 2008-2022  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    me="$(basename "$0")"

    cat <<EOF
Usage: $me -s services_nix -i infrastructure_nix [OPTION]

The command \`disnix-gendist-roundrobin' generates a distribution expression
from a given services and infrastructure expression. It uses the round robin
scheduling method to distribute every service in the services model over each
machine in the infrastructure in equal proportions and circular order.

Options:
  -s, --services=services_nix
                                     Services Nix expression which describes all
                                     components of the distributed system
  -i, --infrastructure=infrastructure_nix
                                     Infrastructure Nix expression which captures
                                     properties of machines in the network
      --extra-params=PARAMS          A string with an attribute set in the Nix
                                     expression language propagating extra
                                     parameters to the input models
      --no-out-link                  Do not create a 'result' symlink
      --show-trace                   Shows a trace of the output
  -h, --help                         Shows the usage of this command to the user
  -v, --version                      Shows the version of this command to the user
EOF
}

# Shows the version of this command to the user

showVersion()
{
    me="$(basename "$0")"

    cat <<EOF
$me (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2022 Sander van der Burg
EOF
}

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o s:i:hv -l services:,infrastructure:,extra-params:,no-out-link,show-trace,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)
            servicesFile=`@readlink@ -f $2`
            ;;
        -i|--infrastructure)
            infrastructureFile=`@readlink@ -f $2`
            ;;
        --no-out-link)
            noOutLink=1
            ;;
        --extra-params)
            extraParamsArg=("--arg" "extraParams" "$2")
            ;;
        --show-trace)
            showTrace=1
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
            ;;
    esac

    shift
done

# Autoconf settings

export prefix=@prefix@

# Import checks

source @datadir@/@PACKAGE@/checks

# Validate the given options

checkServicesFile
checkInfrastructureFile
checkNoOutLink
checkShowTrace

# Build the distribution model

nix-build --argstr servicesFile "$(@readlink@ -f $servicesFile)" \
    --argstr infrastructureFile "$(@readlink@ -f $infrastructureFile)" \
    "$(@readlink@ -f @datadir@/@PACKAGE@/gendist-roundrobin.nix)" \
    "${extraParamsArg[@]}" \
    $noOutLinkArg \
    $showTraceArg
