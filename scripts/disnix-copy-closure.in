#!/bin/bash -e
# Disnix - A distributed application layer for Nix
# Copyright (C) 2008-2010  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    echo "Usage: $0 [options] {--to|--from} --target target path"
    echo "Options:"
    echo
    echo "--to        Copy closure to the given target"
    echo "--from      Copy closure from the given target"
    echo "-t,--target Address of the Disnix service running on the remote machine"
    echo "--interface Path to executable that communicates with a Disnix interface. Defaults to disnix-ssh-client"
    echo "-h,--help   Shows the usage of this command to the user"
}

# Autoconf settings

export prefix=@prefix@

# Import checks

source @datadir@/@PACKAGE@/checks

# Parse valid argument options

PARAMS=`getopt -n $0 -o t:h -l to,from,target:,interface:,help -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

eval set -- "$PARAMS"

# Evaluate valid options

while [ "$1" != "--" ]
do
    case "$1" in
        --to)
            to=1
	    ;;
	--from)
	    from=1
	    ;;
        -t|--target)
	    target=$2
	    ;;
        --interface)
	    interface=$2
	    ;;
	-h|--help)
	    showUsage
	    exit 0
	    ;;
    esac
    
    shift
done

# Get component name
shift
component=$1

# Validate the given options

if [ ! "$to" = "1" ] && [ ! "$from" = "1" ]
then
    echo "ERROR: Either the --from or --to option has to be used!" >&2
    exit 1
fi

checkTarget

checkClientInterface

if [ "$component" = "" ]
then
    echo "ERROR: A Nix component must be specified!" >&2
    exit 1
fi

checkTmpDir

# Execute operation

if [ "$to" = "1" ]
then
    # Resolve the store path of the given file
    storePath=`nix-store --query --resolve $component`

    # Query the requisites of the given component
    requisites=`nix-store --query --requisites $storePath`

    # Invoke a remote Disnix interface to fetch all the paths that 
    # are not already at the remote machine
    invalidPaths=`$interface --target $target --print-invalid $requisites`

    if [ "$invalidPaths" != "" ]
    then
        # Serialise all the missing parts of the closure
        tmpfilename=`mktemp -p $TMPDIR`    
        nix-store --export $invalidPaths > $tmpfilename
    
        # Import the serialisation of the target by using the Disnix interface
        # on the remote machine
        $interface --target $target --import --localfile $tmpfilename
    
        # Remove the serialisation
        rm -f $tmpfilename
    fi
else
    # Query the requisites of the given component
    requisites=`$interface --target $target --query-requisites $component`
    
    # Query all the invalid paths on this machine
    invalidPaths=`nix-store --check-validity --print-invalid $requisites`
    
    if [ "$invalidPaths" != "" ]
    then
	# Export the closure all the invalid paths
	closure=`$interface --target $target --export --remotefile $invalidPaths`
    
	# Import the closure
	cat $closure | nix-store --import
    fi
fi
