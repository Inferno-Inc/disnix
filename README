Introduction:
=============

Disnix is a distributed deployment extension for the Nix package manager.
Nix builds packages from Nix expressions and manages intra-dependencies on 
single systems. Disnix extends this approach by managing inter-dependencies 
of a distributed system and performs the distribution and activation of
distributed system components from Nix expressions that capture the services,
the infrastructure and the distribution of services to machines.

Requisites:
===========
In order to build Disnix from source code, the following packages are required:

- libxml2
- libxslt
- glib
- DBus
- DBus-GLib

For running Disnix additional packages have to be installed:

- Nix (http://www.nixos.org)
- Nixpkgs (http://www.nixos.org)
- OpenSSH (for using the disnix-ssh-client)
- Dysnomia

Refer to the manuals of these packages to install the requisites or install them
by using the package manager of your system.

Installation:
=============

Disnix is a typical autotools based package which can be compiled and installed
by running the following commands in a shell:

./configure
make
make install

For more information about using the autotools setup or for customizing the
configuration, take a look at the ./INSTALL file.

Usage:
======

In order to use Disnix, every target machine should have the 'disnix-service'
installed and running. The Disnix service also requires a protocol wrapper
so that it can be invoked remotely. In the Disnix distribution a SSH wrapper
is included, which requires a running SSH server on the same machine as
every disnix-service. 

Since activation and deactivation of services is different for every
environment, the Disnix service requires the right activation modules package
installed, which should be installed seperately.

For more information about running the Disnix service, have a look at the 
disnix-service manual page or refer to the Disnix manual.

On every client machine, a Nix installation is required and a copy of Nixpkgs.
In order to find the location of Nixpkgs, the environment variable NIX_PATH
has to be set which points to the pkgs/top-level/all-packages.nix file included
in the Nixpkgs tarball (this is already done automatically on NixOS).
This can be done by the following command-line instruction:

$ export NIX_PATH="nixpkgs=/path/to/nixpkgs"

In order to deploy a distributed system a developer has to write a Nix
expression that captures the services of a distributed machine, the network
of machines and a distribution of service to machines in the network. 
By invoking 'disnix-env' with these Nix expressions, services are automatically
built from source code (including all its intra-dependencies), distributed to
the target machines and activated in the right order. In case of a failure
a rollback is performed.
 
See the tutorials on the webpage for more information about deploying a
distributed system with Disnix.

Disnix itself is a modular architecture, which supports various extensions that
can be used to make integration with the host environment better. Refer
to the Disnix manual to see what extensions can be used.
