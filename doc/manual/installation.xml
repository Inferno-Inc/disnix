<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap-installation">

	<title>Installation</title>

	<para>
		This chapter explains how Disnix can be installed. Basically, the coordinator machine needs the Disnix
		client tools. Every target machine needs a Disnix service instance running so that the coordinator
		machine can perform remote deployment steps. Disnix can be used on various platforms.
		The most convenient platform to use is
		<link xlink:href="http://nixos.org">NixOS</link>,
		which only requires a little configuration effort.
		Disnix can also be used on other Linux distributions and other Unix-like systems such as FreeBSD. 
		On those platforms more configuration steps have to be performed.
		Moreover, Disnix can be installed on various systems by using the
		<link xlink:href="http://nixos.org/nix">>Nix package manager</link> or
		by compiling it from source code.
	</para>
	
	<section>
		<title>Compiling Disnix from source</title>

		<section>
			<title>Prerequisites</title>
			<para>
				In order to build Disnix from source code, the following dependencies are required:
				Disnix uses XML for representing the lower level data formats and
				therefore requires
				<link xlink:href="http://www.xmlsoft.org">libxml2</link>
				and
				<link xlink:href="http://www.xmlsoft.org">libxslt</link>
				to parse and transform them.

				The Disnix service that provides remote access to deployment operations
				is a D-Bus service and requires
				<link xlink:href="http://www.freedesktop.org/wiki/Software/DBusBindings">dbus-glib</link>
				(which itself depends on
				<link xlink:href="http://www.gtk.org">GLib</link>
				and
				<link xlink:href="http://www.freedesktop.org/wiki/Software/dbus">D-Bus</link>
				).

				Since Disnix is built on top of the 
				<link xlink:href="http://nixos.org/nix">Nix package manager</link> it also requires
				Nix to be installed on the same machine.
			</para>
		</section>

		<section>
			<title>Compiling Disnix</title>

			<para>
				After unpacking or checking out the Disnix sources, it can be
				compiled by executing the following commands:

				<screen>
$ ./configure <replaceable>options...</replaceable>
$ make
$ make install
				</screen>
			</para>

			<para>
				When building from the Subversion repository, these should be
				preceded by the command:

				<screen>
$ ./bootstrap
				</screen>
			</para>

			<para>
				The installation path can be specified by passing the
				<option>--prefix=<replaceable>prefix</replaceable></option> to
				<command>configure</command>. The default installation directory is
				<filename>/usr/local</filename>. You can change this to any location
				you like.  You must have write permission to the
				<replaceable>prefix</replaceable> path.
			</para>
		</section>
	</section>

	<section>
		<title>Installing the coordinator machine</title>

		<para>
			The easiest way to use Disnix is by installing the Disnix package with
			the Nix package manager from the
			<link xlink:href="http://nixos.org/nixpkgs">Nixpkgs</link>
			repository by typing:

			<screen>
$ nix-env -i disnix
			</screen>

			Another way is downloading the Disnix source distribution
			and to compile it manually. 
		</para>

		<para>
			A copy of
			<link xlink:href="http://nixos.org/nixpkgs">Nixpkgs</link> is required
			and an environment variable <code>NIXPKGS_ALL</code> must point to the path where
			it is installed, so that Disnix is able to find it. On NixOS a copy is 
			already present and this environment variable has already been configured.
			On other systems the variable can be configured by adding the following lines to your
			<filename>~/.bash_profile</filename> configuration:
		</para>
		
		<screen>
$ cat &gt;&gt; ~/.bash_profile &lt;&lt;EOF
# Begin Nixpkgs addition

NIXPKGS_ALL=/path/to/nixpkgs/pkgs/top-level/all-packages.nix
export NIXPKGS_ALL

# End Nixpkgs addition
EOF
		</screen>
	</section>

	<section>
		<title>Installing a target machine</title>

		<para>
			In order to deploy a distributed system in a network of machines, every
			machine needs to be reachable by the coordinator, in order to perform deployment
			steps remotely.
			The Disnix service is a service that provides access to these operations
			through a RPC protocol.
		</para>

		<para>
			The Disnix service consists of two parts. A core Disnix component which actually performs
			the deployment operations and a wrapper which exposes the operations to remote users
			through a RPC protocol (such as the SSH wrapper which is included in the
			Disnix distribution).
		</para>

		<para>
			By default, Disnix includes a SSH client and wrapper that can be used
			to execute remote deployment operations. If you want to use SSH as a 
			communication protocol, a
			<link xlink:href="http://www.openssh.org">OpenSSH</link>
			server must be running on each target machine and a client machine
			requires a OpenSSH client.
		</para>

		<section>
			<title>Installing a target machine running NixOS</title>
			
			<para>
				To enable the Disnix core service on NixOS the following property
				must be defined in the <code>/etc/nixos/configuration.nix</code> file:
				
				<screen>
services.disnix.enable = true;
				</screen>
				
				In order to use the OpenSSH wrapper, also the OpenSSH service must
				be activated in the <code>/etc/nixos/configuration.nix</code> file:
				
				<screen>
services.openssh.enable = true;
				</screen>
			</para>
		</section>

		<section>
			<title>Installing a target machine manually</title>

			<para>
				The core Disnix service is a D-Bus service operating on the system bus,
				which requires the D-Bus system daemon running.
				Moreover, it also requires the Disnix service configuration file
				(which installed in <code>$PREFIX/etc/dbus-1/system.d</code>) in the right location
				so that it is allowed to register itself on the system bus with the right access permissions
				(on most systems this location is in <code>/etc/dbus-1/system.d</code>).
			</para>
			
			<para>
				The Disnix service also performs the activation and deactivation of a service on the machine.
				Since services can have many forms, such as a MySQL database, web application or a UNIX process,
				a Disnix activation scripts package must be installed, which takes care of these steps for
				each service type on the given machine. From the Disnix website, a package for NixOS can
				be downloaded called <code>disnix-activation-scripts-nixos</code>, that will also work on
				most Linux distribution with some configuration options.
				For other platforms these modules have to be adapted so that they will work on that particular
				type of machine.
			</para>
			
			<para>
				Moreover, the host system must configured to start the Disnix D-Bus service automatically. 
				In most Linux distributions this can be done by creating a <code>/etc/init.d/disnix</code>
				<code>init.d</code> script and configure your distribution so that it will be launched on system startup.
				An <code>init.d</code> script for the Disnix service could look like this:
			</para>
			
			<screen>
#!/bin/bash

source /etc/init.d/functions

case "$1":
    start)
        loadproc disnix-service --activation-scripts-dir=/path/to/activation/scripts
        ;;

    stop)
        killproc disnix-service
        ;;
    
    restart)
        $0 stop
        $0 start
        ;;
esac
			</screen>
			
			<para>
				Rerfer to your distribution's <code>init.d</code> script style to see how services
				are configured and launched.
			</para>
			
			<para>
				Except for the core Disnix service, a protocol wrapper is required that provides remote
				access to the core service operations through a RPC protocol. A SSH wrapper is included
				which only requires a OpenSSH server running on the same machine. For other protocols,
				you have to read the documentation that is included with the extension.
			</para>
		</section>
		
		<section>
			<title>Setting the right user permissions</title>
			
			<para>
				By default, only users who are members of the group <code>disnix</code> may access operations
				of the core Disnix service. Thus in order to access the Disnix operations remotely, either
				an account with the right permissions is required or the protocol wrapper should perform
				the authentication to the core Disnix service. The OpenSSH wrapper, for instance,
				uses the credentials of the calling user from the coordinator by default
				and therefore every target machine requires
				the user to be defined in <code>/etc/passwd</code> and the user should be member of
				the <code>disnix</code> group.
			</para>
			
			<para>
				On NixOS the <code>disnix</code> user group is automatically added. For other systems this
				must be done by the system adminstrator.
				On most systems this user group can be added by typing:
			</para>
			
			<screen>
$ groupadd disnix
			</screen>
			
			<para>
				A particular user can be made member of the <code>disnix</code>
				group by the following command-line instruction (<replaceable>someuser</replaceable> must be 
				replaced by a desired username):
			</para>
			
			<screen>
$ usermod -G disnix someuser
			</screen>
		</section>
		
		<section>
			<title>Additional settings for the SSH wrapper</title>
			
			<para>
				If a SSH connection is used, normally it will ask for user credentials for each operation.
				This is not a bug, but an implication of using SSH. In order to make this process non-interactive
				a SSH keypair must be generated. Refer to the <command>ssh-agent</command> manual page for this.
			</para>
		</section>
	</section>
</chapter>
