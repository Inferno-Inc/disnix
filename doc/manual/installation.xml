<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap-installation">

	<title>Installation</title>

	<para>
		This chapter explains how Disnix can be installed. To summarize, the coordinator machine only needs the Disnix
		client utilities. Every target machine needs both the client utilities and a Disnix service instance running,
		so that the coordinator machine can perform remote deployment steps.
	</para>
	<para>
		Disnix can be used on various operating systems and system distributions.
		The most convenient platform to use is
		<link xlink:href="http://nixos.org">NixOS</link>,
		which only requires a little configuration effort.
		Disnix can also be used on other Linux distributions, other Unix-like systems such as FreeBSD and
		on Windows through Cygwin.
		To make Disnix work on these platforms, more configuration steps have to be performed.
	</para>
	<para>
		Moreover, Disnix can be installed using the
		<link xlink:href="http://nixos.org/nix">Nix package manager</link> or
		by compiling it from source code. Instructions on how to install the Nix package manager can be found
		in the <link xlink:href="http://nixos.org/nix/docs.html">Nix manual</link>.
	</para>
	
	<section>
		<title>Installing Disnix from source</title>

		<para>
			This section explains how to install Disnix from source code.
			Usually, compiling from source is only needed in special circumstances such as for 
			development, or trying a new platform. A more convenient way to install
			Disnix is to use the Nix package manager.
		</para>
		
		<section>
			<title>Prerequisites</title>
			<para>
				In order to build Disnix from source code, the following dependencies are required:
				Disnix uses XML for representing the lower level data formats and
				therefore requires
				<link xlink:href="http://www.xmlsoft.org">libxml2</link>
				and
				<link xlink:href="http://www.xmlsoft.org">libxslt</link>
				to parse and transform them.
			</para>
			<para>
				Since Disnix is built on top of the 
				<link xlink:href="http://nixos.org/nix">Nix package manager</link> it also requires
				Nix to be installed on the same machine.
			</para>
		</section>

		<section>
			<title>Compiling Disnix</title>

			<para>
				After unpacking or checking out the Disnix sources, it can be
				compiled by executing the following commands:

<screen>
$ ./configure <replaceable>options...</replaceable>
$ make
$ make install
</screen>
			</para>

			<para>
				When building from the Git repository, these should be
				preceded by the command:

<screen>
$ ./bootstrap
</screen>
			</para>

			<para>
				The installation path can be specified by passing the
				<option>--prefix=<replaceable>prefix</replaceable></option> to
				<command>configure</command>. The default installation directory is
				<filename>/usr/local</filename>. You can change this to any location
				you like.  You must have write permissions to the
				<replaceable>prefix</replaceable> path.
			</para>
		</section>
	</section>
	
	
	<section>
		<title>Installing Disnix with the Nix package manager</title>
		
		<para>
			A more convenient way to install Disnix is using
			the Nix package manager. The
			<link xlink:href="http://nixos.org/nixpkgs">Nixpkgs</link> collection has
			Disnix (as well as some of its extensions) packaged.
			It can be deployed by running the following command-line instruction:

<screen>
$ nix-env -i disnix
</screen>
		</para>
	</section>
	
	<section>
		<title>Installing Nixpkgs</title>
		<para>
			To allow service-oriented systems to be deployed, a copy of
			<link xlink:href="http://nixos.org/nixpkgs">Nixpkgs</link> is required.
			An environment variable named <code>NIX_PATH</code> must point to the path where
			it has been installed, so that Disnix (and other Nix utilities) can find it.
		</para>
		<para>
			In NixOS, a copy of Nixpkgs is 
			already present and this environment variable has already been configured.
			On other systems, this variable can be configured by adding the following lines to your
			<filename>~/.bash_profile</filename> configuration (or a similar configuration
			file, if you use a different shell):
		</para>
		
<screen>
$ cat &gt;&gt; ~/.bash_profile &lt;&lt;EOF
# Begin Nixpkgs addition

NIX_PATH="nixpkgs=/path/to/nixpkgs"
export NIX_PATH

# End Nixpkgs addition
EOF
</screen>
	</section>

	<section>
		<title>Installing the coordinator machine</title>

		<para>
			A coordinator machine simply requires the presence of the Disnix client utilities,
			and a copy of Nixpkgs so that services can be built. Simply executing the steps
			described in the previous sections should suffice.
		</para>
	</section>

	<section>
		<title>Installing a target machine</title>

		<para>
			In order to deploy a distributed system in a network of machines, every
			machine must be reachable by the coordinator machine in order to perform deployment
			steps remotely.
			The Disnix service is a service that provides access to these operations
			through a RPC protocol, that must be installed on every target machine first.
		</para>

		<para>
			The Disnix service consists of two parts. The <emphasis>core</emphasis> actually performs
			the deployment operations and a <emphasis>wrapper</emphasis> exposes the operations to remote users
			through a RPC protocol. The default wrapper is the SSH wrapper, which is included in the
			Disnix distribution. However, other wrappers can also be used.
		</para>

		<para>
			If you want to use SSH as a communication protocol, the
			<link xlink:href="http://www.openssh.org">OpenSSH</link>
			server must be running on each target machine and a client machine
			requires a OpenSSH client.
		</para>

		<section>
			<title>Installing a target machine running NixOS</title>
			
			<para>
				Installing the Disnix service in NixOS is straight forward. First install
				a NixOS machine following the instructions
				described in the
				<link xlink:href="http://nixos.org/nixos/docs.html">NixOS manual</link>.
				To enable the Disnix core service the following property
				must be added to the <filename>/etc/nixos/configuration.nix</filename> file:
				
<screen>
services.disnix.enable = true;
</screen>
				
				In order to use the OpenSSH wrapper, also the OpenSSH service must
				be enabled in the <filename>/etc/nixos/configuration.nix</filename> file:
				
<screen>
services.openssh.enable = true;
</screen>
				Disnix is also executes a number of non-generic deployment activities that
				are carried out by Dysnomia that uses a plugin system implementing them.
				Simply enabling a container service in a NixOS configuration suffices to configure
				Dysnomia to support them.
				For example, by enabling MySQL and Apache Tomcat in NixOS,
				the NixOS module system automatically configures Dysnomia to install the corresponding plugins
				so that Disnix can activate and deactivate services in these containers:
<screen>
services.mysql.enable = true;
services.tomcat.enable = true;
</screen>
			</para>
		</section>

		<section>
			<title>Installing a target machine manually</title>
			
			<para>
				In order to use Disnix on non-NixOS platforms, more steps need to be performed.
				We must install Dynsomia manually and properly configure the Disnix service
				so that remote deployment operations can be executed.
			</para>
			
			<section>
				<title>Installing Dysnomia</title>
				
				<para>
					Disnix has to activate and deactivate various types of components
					in containers, such as a web application, web service, process or database.
					Modules that implement these processes are provided by the <filename>dysnomia</filename>
					package, which is a required dependency of the Disnix service.
				</para>
				<para>
					The <filename>dysnomia</filename> package is autotools based,
					which must be installed by executing the following commands:
				</para>
			
<screen>
$ ./configure <replaceable>options...</replaceable>
$ make
$ make install
</screen>
			
				<para>
					The configure script tries to detect which Dysnomia modules can be
					used on the system. For example, if the configure script is able to detect
					the <command>mysql</command> command on the host system, then the <code>mysql-database</code>
					module is configured and installed and thus a MySQL database can
					be deployed on this system (this requires you to somehow install MySQL
					first, e.g. with the distribution's package manager or with Nix).
				</para>
			
				<para>
					Additionally, it may be possible that not every capability can be detected automatically
					or some modules may need some manual configuration. Consult the
					documentation of the <code>dysnomia</code> or invoke the command:

<screen>
$ ./configure --help
</screen>
					for more information about Dysnomia's configuration parameters which can be used to configure. The
					README.md file can also be consulted for more general information.
				</para>
			</section>
			
			<section>
				<title>Configuring service permissions</title>
				
				<para>
					The core Disnix service is a D-Bus service operating on the system bus,
					which requires the D-Bus system daemon running.
					Moreover, it requires the Disnix service configuration file
					(which is installed in <code>$PREFIX/etc/dbus-1/system.d</code>) in the right location
					so that it is allowed to register itself on the system bus with the right access permissions
					(in most Linux distributions this location is <code>/etc/dbus-1/system.d</code>).
				</para>
				
				<para>
					If a single user Nix installation has been performed, you typically want to change
					the root user into the user that runs Nix. For example, we may want to change this line:
				</para>
				
<screen>
&lt;policy user="root"&gt;
</screen>
				<para>
					into:
				</para>
<screen>
&lt;policy user="sander"&gt;
</screen>
				<para>
					To grant the user: <code>sander</code>, that has a single user Nix installation the permissions to own
					the Disnix service.
				</para>
			</section>
			
			<section>
				<title>Configuring boot scripts on regular Linux distributions</title>
				
				<para>
					The host system must be configured to start the Disnix D-Bus service automatically. 
					In most Linux distributions this can be done by creating a <code>/etc/init.d/disnix</code>
					<code>init.d</code> script and by configuring your distribution in such a way that it will be launched on system startup.
					An <code>init.d</code> script for the Disnix service could look like this:
				</para>
			
<screen>
#!/bin/sh
# Start/stop the disnix-service.
#
### BEGIN INIT INFO
# Provides:          disnix-service
# Default-Start:     2 3 4 5
# Default-Stop:
# Short-Description: Disnix Service
# Description:       Exposes deployment operations to remote machines that are
#                    carried out by Nix and Dysnomia
### END INIT INFO

PATH=/home/sander/.nix-profile/bin:/bin:/usr/bin:/sbin:/usr/sbin
DESC="disnix service"
NAME=disnix-service
DAEMONUSER=sander
DAEMON=/home/$DAEMONUSER/.nix-profile/bin/disnix-service
PIDFILE=/var/run/disnix-service.pid
SCRIPTNAME=/etc/init.d/"$NAME"

test -f $DAEMON || exit 0

. /lib/lsb/init-functions

case "$1" in
start)  log_daemon_msg "Starting disnix service" "$NAME"
        start-stop-daemon --start --quiet --pidfile $PIDFILE --user $DAEMONUSER --name $NAME --background --chuid $DAEMONUSER --exec $DAEMON $EXTRA_OPTS
        log_end_msg $?
        ;;
stop)   log_daemon_msg "Stopping disnix service" "$NAME"
        start-stop-daemon --stop --quiet --user $DAEMONUSER --name $NAME --retry 5
        RETVAL=$?
        [ $RETVAL -eq 0 ] &amp;&amp; [ -e "$PIDFILE" ] &amp;&amp; rm -f $PIDFILE
        log_end_msg $RETVAL
        ;;
restart) log_daemon_msg "Restarting disnix service" "$NAME"
        $0 stop
        $0 start
        ;;
status)
        start-stop-daemon --status --pidfile $PIDFILE --name $NAME &amp;&amp; exit 0 || exit $?
        ;;
*)      log_action_msg "Usage: /etc/init.d/disnix-service {start|stop|status|restart}"
        exit 2
        ;;
esac
exit 0
</screen>
			
				<para>
					Refer to your distribution's <code>init.d</code> script style to see how services
					are configured and launched. For convenience, a Debian-compatible init.d script named
					<code>disnix-service.initd</code> has been placed in the <code>$PREFIX/share/doc</code> folder
					of this package.
				</para>
				<para>
					An important aspect to keep in mind is that both Nix and Dysnomia should be in the <code>PATH</code>
					of the <code>init.d</code> script so that the service can execute all required deployment activities.
					Another important thing is that the Disnix service should be started after the DBus system service and stopped
					in exactly the opposite order.
				</para>
				<para>
					If a single user Nix installation has been performed the <code>DAEMONUSER</code> should correspond to the name
					of the user that is allowed to use it. The name should correspond to <code>root</code> in case of a multi-user
					Nix installation.
				</para>
			</section>
			
			<section>
				<title>Configuring system services on Windows (Cygwin)</title>
				
				<para>
					Cygwin does not use boot scripts for starting and stopping system services,
					but instead it provides the <command>cygrunsrv</command> command, to run Cygwin
					programs as Windows system services.
				</para>
				
				<para>
					Since the core Disnix daemon is a D-Bus service, we need to run the D-Bus system daemon,
					which can be configured by executing the following command:
				</para>
				
<screen>
$ cygrunsrv -I dbus -p /usr/bin/dbus-daemon.exe -a '--system --nofork'
</screen>

				<para>
					The Disnix service can be configured as follows:
				</para>
				
<screen>
$ cygrunsrv -I disnix -p /usr/local/bin/disnix-service.exe \
  -e 'PATH=/bin:/usr/bin:/usr/local/bin' \
  -y dbus -u sander
</screen>

				<para>
					The <option>-u</option> parameter specifies under which the Disnix
					service runs. If a single user Nix installation has been performed, 
					this username should be substituted by the
					actual username under which Disnix has been installed.
					In multi user Nix installations, the <code>-u</code> parameter should
					be omitted.
				</para>
				
				<para>
					The user under which the Disnix service runs should
					have service logon permissions. To check which
					permissions a user has, run:
				</para>
<screen>
$ editrights -u sander -l
</screen>
				<para>
					It should list <replaceable>SeServiceLogonRight</replaceable>. If this is not
					the case, this permission can be granted by running:
				</para>
<screen>
$ editrights -u sander -a SeServiceLogonRight
</screen>
				<para>
					Disnix also needs to be remotely connectible. In order to connect through SSH, you also need to configure a SSH server.
					This can be done by executing the following script on Cygwin:
				</para>
				
<screen>
$ ssh-host-config
</screen>
				
				<para>
					After configuring the services, you probably need to activate them for the fist time,
					which can be done by the Windows service manager (Control Panel -> System and Security
					-> Administrative Tools -> Services).
					You need to pick the Disnix service and select the start option.
					If you want to use the SSH server, you need to pick and start the 'CYGWIN sshd' service as well.
					A screenshot of this is shown in <xref linkend="fig-2-disnixwinservice" />.
				</para>
				
				<figure xml:id="fig-2-disnixwinservice">
					<title>Starting the Disnix Windows system service</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="disnixwinservice.png" format="PNG"/>
						</imageobject>
					</mediaobject>
				</figure>
			</section>
			
			<section>
				<title>Installing a protocol wrapper</title>
				
				<para>
					Apart from the core Disnix service, a protocol wrapper is required that provides remote
					access to the core service operations through a RPC protocol. A SSH wrapper is included
					which only requires a OpenSSH server running on the same machine. For other protocols,
					you have to read the documentation that is included with the extension package.
				</para>
			</section>
		</section>
		
		<section>
			<title>Setting the right user permissions</title>
			
			<para>
				By default, only users who are members of the <code>disnix</code> group may access operations
				of the core Disnix service. In order to access the Disnix operations remotely, either
				an account with the right permissions is required or the protocol wrapper should perform
				the authentication to the core Disnix service. The OpenSSH wrapper, for instance,
				uses the credentials of the calling user from the coordinator by default
				and therefore every target machine requires
				the user to be defined in <code>/etc/passwd</code> and the corresponding user should be member of
				the <code>disnix</code> group.
			</para>
			
			<para>
				In NixOS, the <code>disnix</code> user group is automatically added. For other systems this
				must be done by the system administrator.
				On most systems this user group can be added by typing:
			</para>
			
<screen>
$ groupadd disnix
</screen>
			
			<para>
				A particular user can be made member of the <code>disnix</code>
				group by the following command-line instruction (<replaceable>someuser</replaceable> must be 
				replaced by a desired username):
			</para>
			
<screen>
$ usermod -a -G disnix someuser
</screen>
		</section>
		
		<section>
			<title>Additional settings for the SSH wrapper</title>
			
			<para>
				If an SSH connection is used, <command>disnix-env</command> may ask you to provide user credentials for each operation.
				This is not a bug, but an implication of using SSH. In order to make this process non-interactive
				you must either generate an SSH keypair through <command>ssh-keygen</command> or use
				<command>ssh-agent</command> to remember the authentication settings.
			</para>
		</section>
	</section>
</chapter>
