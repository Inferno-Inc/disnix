<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap-installation">

	<title>Installation</title>
	
	<para>
		This chapter explains how Disnix can be installed. Disnix can be used on many kinds of software distributions, such
		as Linux, Mac OS X and Windows (through Cygwin). In <link xlink:href="http://nixos.org">NixOS</link>
		(the Nix-based Linux distribution) the deployment of Disnix
		is fully automated -- it only requires a user to enable it in the NixOS configuration.
		In other software distributions, Disnix must be installed manually.
	</para>
	<para>
		Moreover, Disnix must be installed on both the coordinator machine responsible for carrying out the deployment process,
		and each available target machine in the network that must run the Disnix service exposing deployment operations
		remotely.
	</para>
	
	<section>
		<title>Installation on NixOS</title>
		
		<para>
			Deploying NixOS-based configurations is quite straight forward. A coordinator machine simply
			requires the presence of the Dysnomia and Disnix utilities in the system environment or a Nix user
			profile. Each target machine requires the Disnix service to be deployed and a number of
			container services.
		</para>
		<section>
			<title>Configuration of the coordinator machine</title>
			<para>
				We can add the required Disnix utilities to the system environment by adding the
				following line to <filename>/etc/nixos/configuration.nix</filename>:
				
<screen>
environment.systemPackages = [ pkgs.dysnomia pkgs.disnix ];
</screen>
			</para>
			<para>
				and rebuilding the NixOS configuration:
			
<screen>
$ nixos-rebuild switch
</screen>
			</para>
		</section>
		
		<section>
			<title>Configuration of a target machine</title>
			<para>
				A NixOS-based target machine requires a number of addtional aspects to be configured.
			</para>
			<para>
				First, we must enable the core Disnix service that exposes deployment operations
				through D-Bus in the NixOS configuration file (<filename>/etc/nixos/configuration.nix</filename>):
<screen>
services.disnix.enable = true;
</screen>
			</para>

			<para>
				The deployment operations must be exposed remotely. Disnix supports various kinds of protocol wrappers to
				accomplish this. To use SSH (which is the default), we must enable the OpenSSH service in
				the NixOS configuration:
<screen>
services.openssh.enable = true;
</screen>
			</para>
			
			<para>
				Besides SSH it also possible to use other kinds of communication protocols.
				<xref linkend="chap-advanced-options" /> has more information on this.
			</para>
			
			<para>
				Disnix executes a number of non-generic deployment activities that
				are carried out by Dysnomia.
				Simply enabling a container service in a NixOS configuration suffices to instruct the Dysnomia configure
				script to install the corresponding plugins.
				For example, we can enable MySQL and Apache Tomcat in a NixOS configuration:
<screen>
services.mysql.enable = true;
services.tomcat.enable = true;
</screen>
				With these two options enabled, Disnix will consult Dysnomia that has been automatically configured by
				the NixOS module system to deploy MySQL databases to the MySQL DBMS and Java web applications
				to the Apache Tomcat servlet container.
			</para>
		</section>
	</section>
	
	<section>
		<title>Manual installation</title>
		
		<para>
			If it is desired to install Disnix manually, we must first install the Disnix
			and Dysnomia packages on every machine in the network. On each target machine, we
			must perform a number of additional steps to get the Disnix service to
			work properly.
		</para>
		
		<section>
			<title>Installing Dysnomia from source</title>
			
			<para>
				The <filename>dysnomia</filename> package is autotools based,
				which must be installed by executing the following commands:
			</para>
			
<screen>
$ ./configure <replaceable>options...</replaceable>
$ make
$ make install
</screen>
			<para>
				The installation path can be specified by passing the
				<option>--prefix=<replaceable>prefix</replaceable></option> to
				<command>configure</command>. The default installation directory is
				<filename>/usr/local</filename>. You can change this to any location
				you like.  You must have write permissions to the
				<replaceable>prefix</replaceable> path.
			</para>
			<para>
				The configure script tries to detect which Dysnomia modules can be
				used on the system. For example, if the configure script is able to detect
				the <command>mysql</command> command on the host system, then the <code>mysql-database</code>
				module is configured and installed. As result, a MySQL database can
				be deployed on this system (this requires you to somehow install MySQL
				first, e.g. with the distribution's package manager or with Nix).
			</para>
		
			<para>
				It may be possible that not every capability can be detected automatically.
				Moreover, some modules may need some manual configuration.
				Invoke the command:

<screen>
$ ./configure --help
</screen>
				for more information about Dysnomia's configuration parameters. Dysnomia's
				<filename>README.md</filename> file can also be consulted for more general information.
			</para>
		</section>
		
		<section>
			<title>Installing Disnix from source</title>
			
			<section>
			    <title>Prerequisites</title>
				<para>
					In order to build Disnix from source code, a number of dependencies are required.
					Disnix uses XML for representing the lower level data formats and
					requires
					<link xlink:href="http://www.xmlsoft.org">libxml2</link>
					and
					<link xlink:href="http://www.xmlsoft.org">libxslt</link>
					to parse and transform them.
					It uses <link xlink:href="https://developer.gnome.org/glib">glib</link> as a utility
					library and means to communicate through D-Bus.
				</para>
				<para>
					Since Disnix is built on top of the 
					<link xlink:href="http://nixos.org/nix">Nix package manager</link> it also requires
					Nix to be installed on the same machine. Consult the Nix homepage for more details
					on how to install it.
				</para>
			</section>

			<section>
				<title>Compiling Disnix</title>

				<para>
					After unpacking or checking out the Disnix sources, it can be
					compiled by executing the following commands:

<screen>
$ ./configure <replaceable>options...</replaceable>
$ make
$ make install
</screen>
				</para>

				<para>
					When building from the Git repository, these should be
					preceded by the command:

<screen>
$ ./bootstrap
</screen>
				</para>

				<para>
				      The installation path can be specified by passing the
				      <option>--prefix=<replaceable>prefix</replaceable></option> to
				      <command>configure</command>. The default installation directory is
				      <filename>/usr/local</filename>. You can change this to any location
				      you like.  You must have write permissions to the
				      <replaceable>prefix</replaceable> path.
				</para>
			</section>
		</section>
		
		<section>
			<title>Installing Disnix with Nix</title>
			
			<para>
				A more convenient way to install Disnix is using
				the Nix package manager. The
				<link xlink:href="http://nixos.org/nixpkgs">Nixpkgs</link> collection has
				Disnix (as well as some of its extensions) packaged.
				It can be deployed by running the following command-line instruction:

<screen>
$ nix-env -i disnix
</screen>
			</para>
		</section>
		
		<section>
			<title>Configuring the D-Bus service</title>
			
			<para>
				The Disnix service is a <link xlink:href="http://www.freedesktop.org/wiki/Software/dbus">D-Bus</link>
				service operating on the system bus.
				As a dependency, it requires D-Bus to be running on the same system, which is
				typically part of the standard installation in nearly any modern Linux distribution.
			</para>
			<para>
				On different kinds of software distributions, such as FreeBSD or Cygwin, the D-Bus package must be installed
				manually. Consult your host system's package manager for more information.
			</para>
			<para>
				Besides installing D-Bus, it is required that the Disnix service configuration file
				(which has been installed in <filename>/usr/local/etc/dbus-1/system.d</filename>) resides in the right location
				so that it is allowed to register itself on the system bus with the right access permissions.
				In most Linux distributions the configuration files of the system services reside in
				<filename>/etc/dbus-1/system.d</filename>.
			</para>
			<para>
				The following command copies the configuration file into the right location:
<screen>
$ cp /usr/local/etc/dbus-1/system.d/disnix.conf /etc/dbus-1/system.d
</screen>
			</para>
			
			<para>
				If a single user Nix installation has been performed (which is typically the case on non-NixOS
				systems), you may want to change
				the root user permission into the user that owns Nix. For example, we may want to change this line:
			</para>
				
<screen>
&lt;policy user="root"&gt;
</screen>
			<para>
				into:
			</para>
<screen>
&lt;policy user="sander"&gt;
</screen>
			<para>
				to grant the user: <code>sander</code>, that owns a single user Nix installation, the permissions to own
				the Disnix service as well.
			</para>
		</section>
		
		<section>
			<title>Starting the Disnix service on startup</title>
			
			<para>
				Another important installation concern is to start the Disnix D-Bus service automatically on startup.
				The following sub sections describe how to accomplish this for several kinds of service managers.
			</para>
			
			<section>
				<title>Composing an init.d script</title>
				
				<para>
					Most conventional Linux distributions support starting and stopping system services by composing
					an init script that typically resides in <filename>/etc/init.d/disnix</filename>.
					An <code>init.d</code> script for the Disnix service could look like this:
				</para>
			
<screen>
#!/bin/sh
# Start/stop the disnix-service.
#
### BEGIN INIT INFO
# Provides:          disnix-service
# Default-Start:     2 3 4 5
# Default-Stop:
# Short-Description: Disnix Service
# Description:       Exposes deployment operations to remote machines that are
#                    carried out by Nix and Dysnomia
### END INIT INFO

PATH=/home/sander/.nix-profile/bin:/bin:/usr/bin:/sbin:/usr/sbin
DESC="disnix service"
NAME=disnix-service
DAEMONUSER=sander
DAEMON=/home/$DAEMONUSER/.nix-profile/bin/disnix-service
PIDFILE=/var/run/disnix-service.pid
SCRIPTNAME=/etc/init.d/"$NAME"

test -f $DAEMON || exit 0

. /lib/lsb/init-functions

case "$1" in
start)  log_daemon_msg "Starting disnix service" "$NAME"
        start-stop-daemon --start --quiet --pidfile $PIDFILE --user $DAEMONUSER --name $NAME --background --chuid $DAEMONUSER --exec $DAEMON $EXTRA_OPTS
        log_end_msg $?
        ;;
stop)   log_daemon_msg "Stopping disnix service" "$NAME"
        start-stop-daemon --stop --quiet --user $DAEMONUSER --name $NAME --retry 5
        RETVAL=$?
        [ $RETVAL -eq 0 ] &amp;&amp; [ -e "$PIDFILE" ] &amp;&amp; rm -f $PIDFILE
        log_end_msg $RETVAL
        ;;
restart) log_daemon_msg "Restarting disnix service" "$NAME"
        $0 stop
        $0 start
        ;;
status)
        start-stop-daemon --status --pidfile $PIDFILE --name $NAME &amp;&amp; exit 0 || exit $?
        ;;
*)      log_action_msg "Usage: /etc/init.d/disnix-service {start|stop|status|restart}"
        exit 2
        ;;
esac
exit 0
</screen>
			
				<para>
					Refer to your distribution's <code>init.d</code> script style to see how services
					are configured and launched. For convenience, a Debian-compatible init.d script named
					<filename>disnix-service.initd</filename> has been placed in the <filename>$PREFIX/share/doc</filename> folder
					of this package.
				</para>
				<para>
					An important aspect to keep in mind is that both Nix and Dysnomia should be in the <envar>PATH</envar>
					of the <code>init.d</code> script so that the service can execute all required deployment activities.
					Another important thing is that the Disnix service should be started after the D-Bus system service and stopped
					in exactly the opposite order.
				</para>
				<para>
					If a single user Nix installation has been performed, then the <envar>DAEMONUSER</envar> environment variable
					should correspond to the name of the user that is allowed to use it. The name should correspond
					to <code>root</code> in case of a multi-user Nix installation.
				</para>
			</section>
		
			<section>
				<title>Composing a Windows system service</title>
				
				<para>
					Windows/Cygwin does not use boot scripts for starting and stopping system services.
					Instead, it provides the <command>cygrunsrv</command> command, to run Cygwin
					programs as Windows system services.
				</para>
				
				<para>
					Since the core Disnix daemon is a D-Bus service, we need to run the D-Bus system daemon,
					which can be configured by executing the following command:
				</para>
					
<screen>
$ cygrunsrv -I dbus -p /usr/bin/dbus-daemon.exe -a '--system --nofork'
</screen>

				<para>
					The Disnix service can be configured as follows:
				</para>
					
<screen>
$ cygrunsrv -I disnix -p /usr/local/bin/disnix-service.exe \
  -e 'PATH=/bin:/usr/bin:/usr/local/bin' \
  -y dbus -u sander
</screen>

				<para>
					The <option>-u</option> parameter specifies under which the Disnix
					service runs. If a single user Nix installation has been performed, 
					this username should be substituted by the
					actual username under which Disnix has been installed.
					In multi-user Nix installations, the <option>-u</option> parameter should
					be omitted.
				</para>
				
				<para>
					The user under which the Disnix service runs should
					have service logon permissions. To check which
					permissions a user has, run:
				</para>
<screen>
$ editrights -u sander -l
</screen>
				<para>
					It should list <replaceable>SeServiceLogonRight</replaceable>. If this is not
					the case, this permission can be granted by running:
				</para>
<screen>
$ editrights -u sander -a SeServiceLogonRight
</screen>
			  
			</section>
		</section>
		
		<section>
			<title>Configuring the SSH protocol wrapper</title>
			
			<para>
				Disnix also needs to be remotely connectible. In order to connect through SSH, you must install an SSH server, such as
				<link xlink:href="http://www.openssh.org">OpenSSH</link>.
				Consult your system distribution's package manager for more information.
			</para>
			<para>
				On Cygwin, we can configure SSH by running the following command-line instruction:
			</para>
				
<screen>
$ ssh-host-config
</screen>
				
			<para>
				After configuring the services, you probably need to activate them for the fist time,
				which can be done by the Windows service manager (Control Panel -> System and Security
				-> Administrative Tools -> Services).
				You need to pick the Disnix service and select the start option.
				If you want to use the SSH server, you need to pick and start the 'CYGWIN sshd' service as well.
				A screenshot of this is shown in <xref linkend="fig-disnixwinservice" />.
			</para>
				
			<figure xml:id="fig-disnixwinservice">
				<title>Starting the Disnix Windows system service</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="disnixwinservice.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
		</section>
	</section>
	
	<section>
		<title>Configuring user accounts</title>
		
		<para>
			By default, only the super user and users who are members of the <code>disnix</code> group may access operations
			of the core Disnix service. In order to access the Disnix operations remotely, either
			an account with the right permissions is required or the protocol wrapper should perform
			the authentication to the core Disnix service.
		</para>
		<para>
			The SSH wrapper, for instance,
			uses the credentials of the calling user on the coordinator by default.
			Therefore, every target machine requires
			the user to be defined in <filename>/etc/passwd</filename> and the user should be member of
			the <code>disnix</code> group.
		</para>
		
		<para>
			In NixOS, the <code>disnix</code> user group is automatically added. For other systems this
			must be done by the system administrator.
			On most systems this user group can be added by typing:
<screen>
$ groupadd disnix
</screen>
		</para>
		
		<para>
			A particular user can be made member of the <code>disnix</code>
			group by the following command-line instruction (<replaceable>someuser</replaceable> must be 
			replaced by a desired username):
		</para>
			
<screen>
$ usermod -a -G disnix someuser
</screen>
	</section>
	
	<section>
		<title>Additional SSH settings</title>
		<para>
			If an SSH connection is used, <command>disnix-env</command> may ask you to provide user credentials for each operation.
			This is not a bug, but an implication of using SSH. In order to make this process non-interactive,
			you must either generate an SSH keypair through <command>ssh-keygen</command> or use
			<command>ssh-agent</command> to remember the authentication settings.
		</para>
	</section>
</chapter>
