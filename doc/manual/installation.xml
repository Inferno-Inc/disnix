<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap-installation">

	<title>Installation</title>

	<para>
		This chapter explains how Disnix can be installed. Basically, the coordinator machine needs the Disnix
		client tools. Every target machine needs a Disnix service instance running so that the coordinator
		machine can perform remote deployment steps. Disnix can be used on various platforms.
		The most convenient platform to use is
		<link xlink:href="http://nixos.org">NixOS</link>,
		which only requires a little configuration effort.
		Disnix can also be used on other Linux distributions, other Unix-like systems such as FreeBSD and
		on Windows through Cygwin. 
		On those platforms more configuration steps have to be performed.
		Moreover, Disnix can be installed on various systems by using the
		<link xlink:href="http://nixos.org/nix">Nix package manager</link> or
		by compiling it from source code. Instructions on how to install Nix can be found
		<link xlink:href="http://nixos.org/nix/docs.html">here</link>.
	</para>
	
	<section>
		<title>Compiling Disnix from source</title>

		<para>
			This section explains how to compile Disnix from source code.
			Usually, this is only needed in special circumstances such as for 
			development, or trying a new platform. A more convenient way to install
			Disnix is to use the Nix package manager.
		</para>
		
		<section>
			<title>Prerequisites</title>
			<para>
				In order to build Disnix from source code, the following dependencies are required:
				Disnix uses XML for representing the lower level data formats and
				therefore requires
				<link xlink:href="http://www.xmlsoft.org">libxml2</link>
				and
				<link xlink:href="http://www.xmlsoft.org">libxslt</link>
				to parse and transform them.

				The Disnix service that provides remote access to deployment operations
				is a D-Bus service and requires
				<link xlink:href="http://www.freedesktop.org/wiki/Software/DBusBindings">dbus-glib</link>
				(which itself depends on
				<link xlink:href="http://www.gtk.org">GLib</link>
				and
				<link xlink:href="http://www.freedesktop.org/wiki/Software/dbus">D-Bus</link>
				).

				Since Disnix is built on top of the 
				<link xlink:href="http://nixos.org/nix">Nix package manager</link> it also requires
				Nix to be installed on the same machine.
			</para>
		</section>

		<section>
			<title>Compiling Disnix</title>

			<para>
				After unpacking or checking out the Disnix sources, it can be
				compiled by executing the following commands:

<screen>
$ ./configure <replaceable>options...</replaceable>
$ make
$ make install
</screen>
			</para>

			<para>
				When building from the Subversion repository, these should be
				preceded by the command:

<screen>
$ ./bootstrap
</screen>
			</para>

			<para>
				The installation path can be specified by passing the
				<option>--prefix=<replaceable>prefix</replaceable></option> to
				<command>configure</command>. The default installation directory is
				<filename>/usr/local</filename>. You can change this to any location
				you like.  You must have write permission to the
				<replaceable>prefix</replaceable> path.
			</para>
		</section>
	</section>

	<section>
		<title>Installing the coordinator machine</title>

		<para>
			The easiest way to use Disnix is by installing the Disnix package with
			the Nix package manager from the
			<link xlink:href="http://nixos.org/nixpkgs">Nixpkgs</link>
			repository by typing:

<screen>
$ nix-env -i disnix
</screen>

			Another way is downloading the Disnix source distribution
			and to compile it manually. 
		</para>

		<para>
			A copy of
			<link xlink:href="http://nixos.org/nixpkgs">Nixpkgs</link> is required
			and an environment variable <code>NIX_PATH</code> must point to the path where
			it is installed, so that Disnix is able to find it. In NixOS, a copy is 
			already present and this environment variable has already been configured.
			On other systems this variable can be configured by adding the following lines to your
			<filename>~/.bash_profile</filename> configuration (or another configuration
			file, if you use a different shell):
		</para>
		
<screen>
$ cat &gt;&gt; ~/.bash_profile &lt;&lt;EOF
# Begin Nixpkgs addition

NIX_PATH="nixpkgs=/path/to/nixpkgs"
export NIX_PATH

# End Nixpkgs addition
EOF
</screen>
	</section>

	<section>
		<title>Installing a target machine</title>

		<para>
			In order to deploy a distributed system in a network of machines, every
			machine needs to be reachable by the coordinator in order to perform deployment
			steps remotely.
			The Disnix service is a service that provides access to these operations
			through a RPC protocol.
		</para>

		<para>
			The Disnix service consists of two parts. A core Disnix component which actually performs
			the deployment operations and a wrapper which exposes the operations to remote users
			through a RPC protocol (such as the SSH wrapper which is included in the
			Disnix distribution).
		</para>

		<para>
			By default, Disnix includes a SSH client and wrapper that can be used
			to execute remote deployment operations. If you want to use SSH as a 
			communication protocol, an
			<link xlink:href="http://www.openssh.org">OpenSSH</link>
			server must be running on each target machine and a client machine
			requires a OpenSSH client.
		</para>

		<section>
			<title>Installing a target machine running NixOS</title>
			
			<para>
				Installing Disnix on NixOS is quite trivial. Follow the instructions
				explained in the
				<link xlink:href="http://nixos.org/nixos/docs.html">NixOS manual</link>
				to install a NixOS machine.
				To enable the Disnix core service on NixOS the following property
				must be defined in the <filename>/etc/nixos/configuration.nix</filename> file:
				
<screen>
services.disnix.enable = true;
</screen>
				
				In order to use the OpenSSH wrapper, also the OpenSSH service must
				be activated in the <filename>/etc/nixos/configuration.nix</filename> file:
				
<screen>
services.openssh.enable = true;
</screen>
			</para>
		</section>

		<section>
			<title>Installing a target machine manually</title>
			
			<para>
				NixOS has a modular configuration
				system, which automatically configures the activation scripts package with the right
				options depending on the configuration settings. For instance, if the MySQL module is
				enabled on NixOS, the activation scripts package is automatically configured to
				use the MySQL instance. On other types of systems this must be done
				by the user.
			</para>
			
			<section>
				<title>Installing activation scripts</title>
				
				<para>
					Disnix has to activate and deactivate various types of components,
					such as a web application, web service, process or database.
					These procedures are part of the <filename>disnix-activation-scripts</filename>
					package, which is a required dependency of the Disnix service. 
					The <filename>disnix-activation-scripts</filename> package is autotools based,
					which must be installed by executing the following commands:
				</para>
			
<screen>
$ ./configure <replaceable>options...</replaceable>
$ make
$ make install
</screen>
			
				<para>
					The configure script tries to detect which activation scripts can be
					used on the system. For example, if the configure script is able to detect
					the <command>mysql</command> command on the host system, then the <code>mysql-database</code>
					activation script is configured and installed and thus a MySQL database can
					be deployed on this system (this requires you to manually install MySQL
					first).
				</para>
			
				<para>
					Additionally, it may be possible that not every capability can be detected automatically
					or some activation types may need some manual configuration. Consult the
					documentation of the <code>disnix-activation-scripts</code> or invoke the command:

<screen>
$ ./configure --help
</screen>
					for more information about parameters which can be used to configure activation scripts.
				</para>
			</section>
			
			<section>
				<title>Configuring service permissions</title>
				
				<para>
					The core Disnix service is a D-Bus service operating on the system bus,
					which requires the D-Bus system daemon running.
					Moreover, it also requires the Disnix service configuration file
					(which installed in <code>$PREFIX/etc/dbus-1/system.d</code>) in the right location
					so that it is allowed to register itself on the system bus with the right access permissions
					(on most systems this location is in <code>/etc/dbus-1/system.d</code>).
				</para>
			</section>
			
			<section>
				<title>Configuring boot scripts on regular Linux distributions</title>
				
				<para>
					The host system must configured to start the Disnix D-Bus service automatically. 
					In most Linux distributions this can be done by creating a <code>/etc/init.d/disnix</code>
					<code>init.d</code> script and configure your distribution so that it will be launched on system startup.
					An <code>init.d</code> script for the Disnix service could look like this:
				</para>
			
<screen>
#!/bin/bash

source /etc/init.d/functions

case "$1":
    start)
        loadproc disnix-service --activation-scripts-dir=/path/to/activation/scripts
        ;;

    stop)
        killproc disnix-service
        ;;
    
    restart)
        $0 stop
        $0 start
        ;;
esac
</screen>
			
				<para>
					Refer to your distribution's <code>init.d</code> script style to see how services
					are configured and launched.
				</para>
			</section>
			
			<section>
				<title>Configuring system services on Windows (Cygwin)</title>
				
				<para>
					Cygwin does not use boot scripts for starting and stopping system services,
					but instead it provides the <command>cygrunsrv</command> command, to run Cygwin
					programs as Windows system services.
				</para>
				
				<para>
					Since the core Disnix daemon is a D-Bus service, we need to run the D-Bus system daemon,
					which can be configured by typing:
				</para>
				
<screen>
$ cygrunsrv -I dbus -p /usr/sbin/dbus-daemon.exe -a '--system --nofork'
</screen>

				<para>
					The Disnix service can be configured by typing:
				</para>
				
<screen>
$ cygrunsrv -I disnix -p /usr/local/bin/disnix-service.exe -a \
  '--activation-modules-dir /usr/local/libexec/disnix/activation-scripts' \
  -e 'PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin' \
  -y dbus
</screen>

				<para>
					Disnix also needs to be remotely connectible. In order to connect through SSH, you also need to configure a SSH server.
					This can be done by executing the following script on Cygwin:
				</para>
				
<screen>
$ ssh-host-config
</screen>
				
				<para>
					After configuring the services, you probably need to activate them for the fist time,
					which can be done by the Windows service manager (Control Panel -> System and Security
					-> Administrative Tools -> Services).
					You need to pick the Disnix service and select the start option.
					If you want to use the SSH server, you need to pick and start the 'CYGWIN sshd' service as well.
					A screenshot of this is shown in <xref linkend="fig-2-disnixwinservice" />.
				</para>
				
				<figure xml:id="fig-2-disnixwinservice">
					<title>Starting the Disnix Windows system service</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="disnixwinservice.png" format="PNG"/>
						</imageobject>
					</mediaobject>
				</figure>
			</section>
			
			<section>
				<title>Installing a protocol wrapper</title>
				
				<para>
					Except for the core Disnix service, a protocol wrapper is required that provides remote
					access to the core service operations through a RPC protocol. A SSH wrapper is included
					which only requires a OpenSSH server running on the same machine. For other protocols,
					you have to read the documentation that is included with the extension.
				</para>
			</section>
		</section>
		
		<section>
			<title>Setting the right user permissions</title>
			
			<para>
				By default, only users who are members of the <code>disnix</code> group may access operations
				of the core Disnix service. Thus in order to access the Disnix operations remotely, either
				an account with the right permissions is required or the protocol wrapper should perform
				the authentication to the core Disnix service. The OpenSSH wrapper, for instance,
				uses the credentials of the calling user from the coordinator by default
				and therefore every target machine requires
				the user to be defined in <code>/etc/passwd</code> and the user should be member of
				the <code>disnix</code> group.
			</para>
			
			<para>
				On NixOS the <code>disnix</code> user group is automatically added. For other systems this
				must be done by the system adminstrator.
				On most systems this user group can be added by typing:
			</para>
			
<screen>
$ groupadd disnix
</screen>
			
			<para>
				A particular user can be made member of the <code>disnix</code>
				group by the following command-line instruction (<replaceable>someuser</replaceable> must be 
				replaced by a desired username):
			</para>
			
<screen>
$ usermod -G disnix someuser
</screen>
		</section>
		
		<section>
			<title>Additional settings for the SSH wrapper</title>
			
			<para>
				If a SSH connection is used, normally it will ask for user credentials for each operation.
				This is not a bug, but an implication of using SSH. In order to make this process non-interactive
				a SSH keypair must be generated. Refer to the <command>ssh-agent</command> manual page for this.
			</para>
		</section>
	</section>
</chapter>
