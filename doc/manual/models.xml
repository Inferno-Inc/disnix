<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap-models">

	<title>Writing Disnix models</title>

        <para>
		In this section, we explain how to write models that Disnix can use to
		automatically deploy a distributed service-oriented system into a network of machines.
		We use the <link xlink:href="https://github.com/svanderburg/disnix-stafftracker-java-example">StaffTracker</link>
		system as an example for this, which is a distributed system consisting of MySQL databases,
		Java web services and Java web applications. Other types of distributed
		systems, with different types of components, can be deployed with Disnix as well, such
		as PHP applications and UNIX processes.
	</para>
	<para>
		Some examples (including the
		<code>StaffTracker</code>)
		can be found in on my Github page:
		<link xlink:href="https://github.com/svanderburg?tab=repositories">https://github.com/svanderburg?tab=repositories</link>.
        </para>
        
	<section>
		<title>Background</title>
		
		<para>
			The example used in this section is a system which is used to manage staff of a
			university. This system stores various records about staff members, such as their
			names, room numbers and IP addresses.
		</para>
		<para>
			The system can determine
			a zipcode from the staff member's room number.
			From the zipcode it can determine the address of the
			building. From the IP address of a staff member, the system can determine
			the current location of the staff member.
			All the data repositories are stored in separate databases.
			Each data repository can be accessed through a web service.
		</para>
	</section>
        
	<section>
		<title>Architecture</title>
		
		<figure xml:id="fig-1-stafftracker">
			<title>Architecture of the <code>StaffTracker</code></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="stafftracker.png" format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>
		
		<para>
			<xref linkend="fig-1-stafftracker" /> shows the architecture of the 
			<code>StaffTracker</code> system. Basically, the
			architecture consists of three layers: 
			a <emphasis>data layer</emphasis>, <emphasis>service layer</emphasis> and <emphasis>presentation layer</emphasis>.
			The database layer contains MySQL databases,
			which store records such as zipcodes and staff members.
			The web service layer contains web service components, which expose
			operations to access data in the databases and to update records
			(the <code>GeolocationService</code> uses GeoIP to track a location).
			In the presentation layer, the <code>StaffTracker</code>
			web application front-end is shown, which can be 
			used by end users to manage staff of a university.
		</para>
		
		<para>
			All the components shown in the picture are
			<emphasis>distributable</emphasis> components (or services).
			For instance, the <code>GeolocationService</code> can
			be deployed on a different machine in the network as
			the <code>StaffTracker</code> web application front-end.
			The arrows represent inter-dependency relationships, which
			are usually RPC or network connections.
		</para>
	</section>
	
	<section>
		<title>Writing a Disnix expression</title>
		
		<para>
			The Nix package manager builds components from specifications called
			Nix expressions, written in the Nix expression language.
			Disnix also uses this concept. In this section, we first show how an
			ordinary Nix expression is written and then we show how this concept
			is used in a distributed setting.
		</para>
		
		<section>
			<title>Nix example</title>
			
			<example xml:id="ex-1-hello">
				<title>Nix expression for the GNU Hello package</title>
<programlisting>
{stdenv, fetchurl, perl}: <co xml:id='co-1-functionHeader' />

stdenv.mkDerivation { <co xml:id='co-2-mkDerivation' />
  name = "hello-2.1.1"; <co xml:id='co-3-name' />
  src = fetchurl { <co xml:id='co-4-src' />
    url = ftp://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz;
    md5 = "70c9ccf9fac07f762c24f2df2290784d";
  };
  buildInputs = [ perl ]; <co xml:id='co-5-buildInputs' />

  meta = { <co xml:id='co-6-meta' />
    description = "GNU Hello, a classic computer science tool";
    homepage = http://www.gnu.org/software/hello/;
  };
}
</programlisting>
			</example>
		
			<para>
				<xref linkend="ex-1-hello" /> shows a Nix expression for the GNU Hello package,
				a trivial package which contains the <command>hello</command> command
				showing the "Hello World" quote.
			</para>
		
			<calloutlist>
				<callout arearefs='co-1-functionHeader'>
					<para>
						This line states that the expression is a function, taking 3 arguments:
						<varname>stdenv</varname>, <varname>fetchurl</varname> and <varname>perl</varname>.					
						<varname>stdenv</varname> is the standard
						environment containing basic UNIX utilities and build environment,
						such as <code>cat</code>, <code>ls</code> and <code>gcc</code>.
						The <varname>fetchurl</varname> argument is used to download a source tarball
						from a particular URL. The <varname>perl</varname> argument is the Perl
						interpreter.
					</para>
				</callout>
				
				<callout arearefs='co-2-mkDerivation'>
					<para>
						Here, we call the <code>stdenv.mkDerivation</code> function which performs
						a build. We have not specified in the arguments how to build this component.
						By default, the builder assumes that this package is a GNU Autotools based
						package and basically executes the following instructions:
						<code>./configure; make; make install</code>.
					</para>
				</callout>
				
				<callout arearefs='co-3-name'>
					<para>
						Every package has requires a name. This name becomes part
						of the filename of the resulting package in the Nix store and also gives a user
						the option to look it up after it has been installed.
					</para>
				</callout>
				
				<callout arearefs='co-4-src'>
					<para>
						This attribute specifies the source code that we want to compile. In our example,
						it is bound to the result of the <varname>fetchurl</varname>
						function invocation, which downloads the GNU Hello source tarball from the GNU FTP
						site and uses the MD5 hash to verify whether the source tarball matches what
						we expect.
					</para>
				</callout>
				
				<callout arearefs='co-5-buildInputs'>
					<para>
						This attribute is used to specify which packages must be used
						in the build environment. In our example, <command>perl</command> has been provided
						as a build input. The builder automatically sets the <varname>PATH</varname>
						and <varname>PERL5LIB</varname> environment vairables, so that Perl can be found by
						build process that is executed in the builder environment.
					</para>
				</callout>
				
				<callout arearefs='co-6-meta'>
					<para>
						We can also specify some meta data for a package, so that we have a description
						and other useful information, such as the homepage and a license. These properties are not used
						for building a component.
					</para>
				</callout>
			</calloutlist>
		
			<para>
				Although the expression in <xref linkend="ex-1-hello" /> defines how to build a package from source code
				and its dependencies, we cannot use this expression to build the package directly because we do not
				know which version/variant of Perl we must use and which compiler and so on.
				Therefore, we have to <emphasis>compose</emphasis> the package in a seperate expression, in which we call
				the function shown ealier with its required parameters.
			</para>
		
			<example xml:id="ex-2-all-packages">
				<title><filename>all-packages.nix</filename>: Partial composition expression</title>
				
				<programlisting>
rec { <co xml:id='co-1-rec' />
  stdenv = ...;
  
  fetchurl = ...;
  
  perl = import ../pkgs/perl { <co xml:id='co-2-importPerl' />
    inherit stdenv fetchurl;
  };
  
  hello = import ../pkgs/hello { <co xml:id='co-3-importHello' />
    inherit stdenv fetchurl perl;
  };
  
  ...
}
				</programlisting>
			</example>
		
			<para>
				<xref linkend="ex-2-all-packages" /> shows a partial composition expression, in which the GNU Hello component
				build function is called with the its required parameters. Moreover, all the other packages where GNU Hello dependends
				on are also composed in this expression.
			</para>
		
			<calloutlist>
				<callout arearefs='co-1-rec'>
					<para>
						This expression is a mutually recursive attribute set in which attributes can refer to each other.
						This is required, because we have to pass attributes as function parameters to every function
						imported in this file.
					</para>
				</callout>
				
				<callout arearefs='co-3-importHello'>
					<para>
						Here, the expression defined in <xref linkend="ex-1-hello" /> is imported and called
						with the its requires function parameters. The corresponding dependencies are
						composed in the same expression as well.
					</para>
					<para>
						We can also use the function parameters to make different kinds of compositions of the same package.
						For example, by replacing <code>inherit perl;</code> with <code>perl = perl54;</code> we
						can build GNU Hello using a different version of Perl.
					</para>
				</callout>
				
				<callout arearefs='co-2-importPerl'>
					<para>
						Moreover, all the dependencies of the GNU Hello package, such as the Perl interpreter
						are composed in this expression as well.
					</para>
				</callout>
			</calloutlist>
		</section>
		
		<section>
			<title>Disnix example</title>
			
			<para>
				Similar to writing a Nix expression for an arbitrary package,
				every service deployed by Disnix also requires a expression which describes how to
				build it from source code and its dependencies. A Disnix expression is
				nearly identical to an ordinary Nix expression, except that it also
				takes inter-dependencies into account to configure and build a component.
			</para>
			
			<example xml:id="ex-3-zipcode-service">
				<title>Disnix expression for the <code>ZipcodeService</code></title>
<programlisting>
{stdenv, apacheAnt, axis2}: <co xml:id='co-1-outerFunctionHeader' />
{zipcodes}: <co xml:id='co-2-innerFunctionHeader' />

let
  contextXML = ''
    &lt;Context&gt;
      &lt;Resource name="jdbc/ZipcodeDB" auth="Container" type="javax.sql.DataSource"
                maxActivate="100" maxIdle="30" maxWait="10000"
                username="${zipcodes.target.mysqlUsername}" password="${zipcodes.target.mysqlPassword}" driverClassName="com.mysql.jdbc.Driver"
                url="jdbc:mysql://${zipcodes.target.hostname}:${toString (zipcodes.target.mysqlPort)}/${zipcodes.name}?autoReconnect=true" /&gt;
    &lt;/Context&gt; <co xml:id='co-3-contextXML' />
  '';
in
stdenv.mkDerivation { <co xml:id='co-4-mkDerivation' />
  name = "ZipcodeService";
  src = ../../../../services/webservices/ZipcodeService;
  buildInputs = [ apacheAnt ];
  AXIS2_LIB = "${axis2}/lib";
  AXIS2_WEBAPP = "${axis2}/webapps/axis2";
  buildPhase = "ant generate.war";
  installPhase = ''
    ensureDir $out/conf/Catalina
    cat > $out/conf/Catalina/ZipcodeService.xml &lt;&lt;EOF <co xml:id='co-5-cat-contextXML' />
    ${contextXML}
    EOF
    ensureDir $out/webapps
    cp *.war $out/webapps
  '';
}
</programlisting>
			</example>
			
			<para>
				<xref linkend="ex-3-zipcode-service" /> shows a Disnix expression for
				a particular web service component of the <code>StaffTracker</code>
				system, called <code>ZipcodeService</code>, which provides access
				to records in the <code>zipcode</code> database.
				Basically, a Disnix expression is a nested function (which has two
				function headers instead of one). The headers represent 
				intra-dependencies and inter-dependencies respectively,
				which are both used to build and configure a service.
			</para>
		
			<calloutlist>
				<callout arearefs='co-1-outerFunctionHeader'>
					<para>
						This is the outer function header, which specifies all the local dependencies,
						or <emphasis>intra-dependencies</emphasis>.
						Intra-dependencies are all build-time and run-time dependencies
						located on the same system. In order to build the <code>ZipcodeService</code>
						a <varname>stdenv</varname> component is needed which is the standard
						environment containing basic UNIX utilities and build environment.
						The <varname>apacheAnt</varname> argument specifies that we need
						Apache Ant to compile the project, since it is written in Java
						and requires Ant as a build tool. The <varname>axis2</varname> argument
						refers to the Apache Axis2 library used to build web services.
					</para>
				</callout>
				
				<callout arearefs='co-2-innerFunctionHeader'>
					  <para>
						This is the inner function header, which specifies all the <emphasis>inter-dependencies</emphasis>.
						The <varname>zipcodes</varname> argument refers to a database in which all the
						zipcodes are stored. The database may be running on a different machine as the
						<code>ZipcodeService</code> and is consulted by the web service with a TCP connection.
					  </para>
				</callout>
				
				<callout arearefs='co-3-contextXML'>
					  <para>
						This string contains a so-called context XML file. This is a configuration
						file used by Apache Tomcat in order to configure web application specific settings.
						One of these configuration settings are database settings.
						To compose this string, we use the inter-dependency parameter: <varname>zipcodes</varname>
						to generate a JDBC connection string that can be used to connect to the
						remote database. The <varname>zipcodes</varname> argument is an attribute set,
						containing service and infrastructure properties, which can be used
						to configure the web service. Each inter-dependency parameter contains
						the attribute <varname>targets</varname>, which contains a list of machines
						and its properties on which the inter-dependency is deployed.
						The <varname>target</varname> parameter is the first element from the 
						<varname>targets</varname> list.
						The properties of the inter-dependencies are defined in the services model, which
						we show later. The properties in the <varname>target</varname> attribute are
						defined in the infrastructure model (also shown later).
					  </para>
				</callout>
				
				<callout arearefs='co-4-mkDerivation'>
					  <para>
						Like ordinary Nix expressions, we must call the derivation function to build a component
						from source code and to produce the output in the Nix store. It also requires
						you to define attributes, such as <varname>name</varname> which is compulsory in
						order to build a package from source code.
					  </para>
				</callout>
				
				<callout arearefs='co-5-cat-contextXML'>
					  <para>
						Here, the context XML file defined earlier is written into a text file and included
						with the generated web application so that the configuration settings can be
						found by the Apache Tomcat web service. The activation script for Apache Tomcat
						takes care of the activation process.
					  </para>
				</callout>
			</calloutlist>
		
			<para>
				<xref linkend="ex-3-zipcode-service" /> shows you how to build and configure an Apache Axis2 web service.
				Different types of components have different kinds configuration steps, however. The only thing Disnix
				takes care of is that the locations of the inter-dependencies and the properties of
				the services and machines are provided in the build environment of the component.
				These properties must then be used by the developer to properly configure and build the
				service, such as generating a configuration file which the service understands and specifying
				the build steps.
			</para>
		</section>
	</section>
	
	<section>
		<title>Intra-dependency composition</title>
		
		<para>
			Like ordinary Nix expressions, we cannot use the expression in <xref linkend="ex-3-zipcode-service" /> directly to build the
			service. We need to <emphasis>compose</emphasis> it by calling the function with the right arguments.
			With Disnix, we need to call this function twice. First, we have to compose this expression locally,
			by calling it with the required intra-dependency arguments. Later on, we have to compose it
			by using the inter-dependency arguments.
		</para>
		
		<example xml:id="ex-4-intra-dependency-composition">
			<title>Intra-dependency composition for the <code>StaffTracker</code></title>
			
<programlisting>
{system, pkgs}:

rec { <co xml:id='co-3-rec' />
### Databases

  rooms = import ../pkgs/databases/rooms {
    inherit (pkgs) stdenv;
  };
  
  staff = import ../pkgs/databases/staff {
    inherit (pkgs) stdenv;
  };
  
  zipcodes = import ../pkgs/databases/zipcodes {
    inherit (pkgs) stdenv;
  };

### Web services + Clients
    
  ZipcodeService = import ../pkgs/webservices/ZipcodeService { <co xml:id='co-4-composition' />
    inherit (pkgs) stdenv apacheAnt axis2;
  };
  
  ZipcodeServiceClient = import ../pkgs/webservices/ZipcodeServiceClient {
    inherit (pkgs) stdenv apacheAnt axis2;
  };
  ...
  
### Web applications

  StaffTracker = import ../pkgs/webapplications/StaffTracker {
    inherit (pkgs) stdenv apacheAnt axis2;
    inherit GeolocationServiceClient RoomServiceClient StaffServiceClient ZipcodeServiceClient;
  };
}
</programlisting>
		</example>
		
		<para>
			<xref linkend="ex-4-intra-dependency-composition" /> shows a Nix expression in which
			services are composed locally by calling the expressions with its required intra-dependency arguments.
		</para>
		
		<calloutlist>
			<callout arearefs='co-3-rec'>
				 <para>
					Like the <code>pkgs/top-level/all-packages.nix</code> file in Nixpkgs, this composition expression
					is also a mutually recursive attribute set in which attributes can refer to each other.
					This is required, because we have to pass attributes as function parameters to every function
					imported in this file.
				 </para>
			</callout>
			
			<callout arearefs='co-4-composition'>
				<para>
					Here, the expression from <xref linkend="ex-3-zipcode-service" /> is imported and called with the right
					intra-dependency arguments. The arguments are defined as attributes in this model, or defined
					in Nixpkgs.
				</para>
			</callout>
		</calloutlist>
	</section>
	
	<section>
		<title>Services model</title>
		
		<para>
			Apart from specifiying how to build a package from source code and what its local (intra) dependencies
			are, we also need to know what components are distributable, what their inter-dependencies are and
			how to activate or deactivate them. This is information captured in the services model.
		</para>
		
		<example xml:id="ex-5-services-model">
			<title>Services model for the <code>StaffTracker</code></title>
			
<programlisting>
{distribution, system, pkgs}: <co xml:id='co-1-servicesHeader' />

let customPkgs = import ../top-level/all-packages.nix { inherit system; }; <co xml:id='co-2-importIntra' />
in
rec { <co xml:id='co-3-rec2' />
### Databases
  zipcodes = { 
    name = "zipcodes"; 
    pkg = customPkgs.zipcodes; 
    dependsOn = {};
    type = "mysql-database";
  };
  ...
  
### Web services  

  ZipcodeService = { <co xml:id='co-4-service' />
    name = "ZipcodeService"; <co xml:id='co-5-serviceName' />
    pkg = customPkgs.ZipcodeService; <co xml:id='co-6-pkg' />
    dependsOn = { <co xml:id='co-7-dependsOn' />
      inherit zipcodes;
    };
    type = "tomcat-webapplication"; <co xml:id='co-8-type' />
  };
  ...

### Web applications

  StaffTracker = {
    name = "StaffTracker";
    pkg = customPkgs.StaffTracker;
    dependsOn = {
      inherit GeolocationService RoomService StaffService ZipcodeService;
    };
    type = "tomcat-webapplication";
  };
}
</programlisting>
		</example>
		
		<para>
			<xref linkend="ex-5-services-model" /> represents the services model of the <code>StaffTracker</code>
			system. Here all the distributable components are shown, their inter-dependencies and other relevant
			properties. As might be observed, the structure of this file (i.e. the services and inter-dependency relationships)
			are the same as in the architecture diagram, shown in <xref linkend="fig-1-stafftracker" />.
		</para>
		
		<calloutlist>
			<callout arearefs='co-1-servicesHeader'>
				<para>
					The services expression is a function, which takes three arguments.
					The <varname>distribution</varname> parameter represents the distribution model,
					in which services are mapped onto machines in the network (this model is explained
					later). This model can be used by services to configure themselves based on the
					location of each service. The <varname>system</varname> parameter is an identifier
					for the system architecture on which services must be built. An examples of an
					identifier is: <code>i686-linux</code> representing a 32-bit <code>x86</code> Linux machine.
					The <varname>pkgs</varname> parameter represents the Nixpkgs collection for
					the corresponding system, containing a large collection of free and open source packages
					(including some proprietary ones).
				</para>
			</callout>
			
			<callout arearefs='co-2-importIntra'>
				<para>
					Here, the expression from <xref linkend="ex-4-intra-dependency-composition" /> is imported so that we can use the
					intra-dependency compositions of the system.
				</para>
			</callout>
			
			<callout arearefs='co-3-rec2'>
				<para>
					Like the intra-dependency composition expression in the previous example,
					the services expression is also a mutually recursive attribute set in which attributes
					can refer to each other. This required to pass the services as inter-dependency
					arguments to each service.
				</para>
			</callout>
			
			<callout arearefs='co-4-service'>
				 <para>
					Every attribute represents a <emphasis>service</emphasis> (i.e. a distributable
					component). These attributes represent to the components shown in the
					architecture in <xref linkend="fig-1-stafftracker" />.
				 </para>
			</callout>
			
			<callout arearefs='co-5-serviceName'>
				<para>
					Every service has a canonical name, so that it is known when invoking
					them from inter-dependency arguments. This name must match the attribute name.
				</para>
			</callout>
			
			<callout arearefs='co-6-pkg'>
				<para>
					For every service we need to know how to build it and what the intra-dependencies are. 
					This attribute refers to the function call that actually builds the service and
					its intra-dependencies from source code, which is defined in
					<xref linkend="ex-4-intra-dependency-composition" />.
				</para>
			</callout>
			
			<callout arearefs='co-7-dependsOn'>
				<para>
					We also need to know for each service what the inter-dependencies are. In this
					case, we specify that the attribute <varname>zipcodes</varname> (a service also
					defined in the services model) is an inter-dependency
					of the <code>ZipcodeService</code>. 
					By using Nix expression language constructs, you can also create different inter-dependency
					compositions. For instance by specifying: <code>zipcodes = mycustomzipcodes;</code>
					instead of <code>inherit zipcodes;</code> (syntactic sugar for 
					<code>zipcodes = zipcodes;</code>),
					you can configure the <code>ZipcodeService</code> to use a different database.
				</para>
			</callout>
			
			<callout arearefs='co-8-type'>
				<para>
					Finally, we must know how to activate and deactive a service. Since services can represent
					nearly anything, such as a database or web application, we cannot perform this step generically.
					This attribute specifies the type of the service, which is used by Disnix to consult Dysnomia
					on the target machine performing the actual activation or deactivation process. 
				</para>
				<para>
					Various types of services are supported by Dysnomiasuch as: <code>tomcat-webapplication</code> which will activate
					a web application on Apache Tomcat, <code>mysql-database</code> which will import
					a MySQL database schema on first startup and <code>process</code> which activates a generic
					UNIX process. Moreover, a <code>wrapper</code> type exists, which allows the developer to include
					his own activation script inside the service.
				</para>
			</callout>
		</calloutlist>
	</section>
	
	<section>
		<title>Infrastructure model</title>
		
		<para>
			Apart from the services and their relevant configuration properties, we also need to know what machines are
			available and their relevant properties and capabilities. These attributes are captured in the
			infrastructure model.
		</para>
		
		<example xml:id="ex-6-infrastructure-model">
			<title>Infrastructure model</title>
			
<programlisting>
{
  test1 = {
    hostname = "test1.example.org";
    tomcatPort = 8080;
    system = "i686-linux";
  };
  
  test2 = { <co xml:id='co-1-target' />
    hostname = "test2.example.org"; <co xml:id='co-2-hostname' />
    system = "x86_64-linux"; <co xml:id='co-3-system' />
    tomcatPort = 8080;
    mysqlPort = 3306; <co xml:id='co-4-mysqlPort' />
    mysqlUsername = "root";
    mysqlPassword = "admin";
  }; 
}
</programlisting>
		</example>
		
		<para>
			<xref linkend="ex-6-infrastructure-model" /> shows an infrastructure model describing 2 machines, which can be used to
			deploy the <code>StaffTracker</code> services on.
		</para>
		
		<calloutlist>
			  <callout arearefs='co-1-target'>
				<para>
					The infrastructure model is an attribute set in which each attribute represents a 
					machine in the network. This attribute refers to the properties of a machine called
					<code>test2</code>.
				</para>
			  </callout>
			  
			  <callout arearefs='co-2-hostname'>
				  <para>
					In order to perform deployment steps remotely, we need to know how to connect
					to the machine. By default, the <code>hostname</code> attribute is used for this.
					Disnix can be configured to use a different property as well through a command-line
					parameter or environment variable.
				  </para>
			  </callout>
			  
			  <callout arearefs='co-3-system'>
				<para>
					A machine in the network may have a different system architecture as the coordinator machine.
					The <code>system</code> attribute can be used to specify the actual architecture of a target machine. By specifying
					an architecture. the coordinator will invoke Nix to build the service for that particular
					platform.
				</para>
				<para>
					In some cases Nix may not be able to build a service directly, because it is incapable
					to run a compiler for that platform or it has no dedicated build machine with the
					right architecture to delegate the build to.
					In such cases you can either build the service on a target machine in the network.
					By omitting the <code>system</code> attribute, Disnix will build the service for
					the same architecture as the coordinator machine.
				</para>
			  </callout>
			  
			  <callout arearefs='co-4-mysqlPort'>
				  <para>
					The other properties of a machine can be freely chosen and are used by the
					Dysnomia modules to activate a particular service. For instance, the
					<code>mysqlPort</code> specifies on which port the MySQL can be reached.
					The MySQL properties in this model are used by the MySQL Dysnomia module.
				  </para>
			  </callout>
		</calloutlist>
		
		<para>
			Although you can specify what a network configuration looks like in an infrastructure model,
			you as a developer or system administrator must make sure that the machines in the
			network match this configuration. There are some tools which can assist in this job. 
			For instance. if only NixOS machines are used, an infrastructure model can be generated
			from a network of NixOS configurations.
		</para>
	</section>
	
	<section>
		<title>Distribution model</title>
		
		<para>
			Disnix also needs to know for each service on which machine it must be deployed. A distribution
			model needs to be provided to make this possible.
		</para>
		
		<example xml:id="ex-7-distribution-model">
			<title>Distribution model for the <code>StaffTracker</code></title>
			
<programlisting>
{infrastructure}:

{
  zipcodes = [ infrastructure.test2 ]; <co xml:id='co-1-zipcodes' />
  ZipcodeService = [ infrastructure.test1 ]; <co xml:id='co-2-ZipcodeService' />
  StaffTracker = [ infrastructure.test1 infrastructure.test2 ]; <co xml:id='co-3-StaffTracker' />
  ...
}
</programlisting>
		</example>
		
		<para>
			<xref linkend="ex-7-distribution-model" /> shows a distribution model for a particular
			deployment scenario of the <code>StaffTracker</code> system.
		</para>
		
		<calloutlist>
			<callout arearefs='co-1-zipcodes'>
				<para>
					This attribute assignment states that the <code>zipcodes</code> service should be
					deployed on machine <code>test2</code>.
					The machine and its properties can be accessed by using the <varname>target</varname> property
					on an inter-dependency argument in a Disnix expression, such as
					<xref linkend="ex-3-zipcode-service" />.
				</para>
			</callout>
			
			<callout arearefs='co-2-ZipcodeService'>
				<para>
					This attribute assignment states that the <code>ZipcodeService</code> service should be
					deployed on machine <code>test1</code>.
				</para>
			</callout>
			
			<callout arearefs='co-3-StaffTracker'>
				<para>
					This attribute assignment states that the <code>StaffTracker</code> service should be
					deployed on both <code>test1</code> and <code>test2</code>. By specifying multiple
					machines you can implement features such as a fallback mechanism or load balancing.
					This list of machines can be accessed by using the <varname>targets</varname> property
					on an inter-dependency argument in a Disnix expression, such as
					<xref linkend="ex-3-zipcode-service" />.
				</para>
			</callout>
		</calloutlist>
	</section>
</chapter>
