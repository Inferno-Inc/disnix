<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap-models">

	<title>Writing Disnix models</title>

        <para>
		In this section, we explain how to write models that Disnix can use to
		automatically deploy a distributed service-oriented system into a network of machines.
		We use the <link xlink:href="https://github.com/svanderburg/disnix-stafftracker-java-example">StaffTracker</link>
		system as an example, which is a distributed toy system consisting of MySQL databases,
		Java web services and Java web applications. Other types of distributed
		systems, with different types of components, can be deployed with Disnix as well, such
		as PHP applications and UNIX processes.
	</para>
	<para>
		Some examples (including the
		<code>StaffTracker</code>)
		can be found on my Github page:
		<link xlink:href="https://github.com/svanderburg?tab=repositories">https://github.com/svanderburg?tab=repositories</link>.
        </para>
        
	<section>
		<title>Background</title>
		
		<para>
			The example used in this section is a system which is used to manage staff of a
			fictional university. This system stores various records about staff members, such as their
			names, room numbers and IP addresses.
		</para>
		<para>
			The system can determine
			a zipcode from the staff member's room number.
			From the zipcode it can determine the address of the
			building. From the IP address of a staff member, the system can determine
			the current location of the staff member.
			All the data repositories are stored in separate databases.
			Each data repository can be accessed through a web service.
		</para>
	</section>
        
	<section>
		<title>Architecture</title>
		
		<figure xml:id="fig-1-stafftracker">
			<title>Architecture of the <code>StaffTracker</code></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="stafftracker.png" format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>
		
		<para>
			<xref linkend="fig-1-stafftracker" /> shows the architecture of the 
			<code>StaffTracker</code> system. Basically, the
			architecture consists of three layers: 
			a <emphasis>data layer</emphasis>, <emphasis>service layer</emphasis> and <emphasis>presentation layer</emphasis>.
			The database layer contains MySQL databases,
			which store records such as zipcodes and staff members.
			The web service layer contains web service components, which expose
			operations to access data in the databases and to update records
			(the <code>GeolocationService</code> uses GeoIP to track a location).
			In the presentation layer, the <code>StaffTracker</code>
			web application front-end is shown, which can be 
			used by end users to manage staff of a university.
		</para>
		
		<para>
			All the components shown in the picture are
			<emphasis>distributable</emphasis> components (or services).
			For instance, the <code>GeolocationService</code> can
			be deployed to a different machine in the network as
			the <code>StaffTracker</code> web application front-end.
			The arrows represent inter-dependency relationships, which
			are either (direct) TCP or SOAP connections.
		</para>
	</section>
	
	<section>
		<title>Writing a Disnix expression</title>
		
		<para>
			The Nix package manager builds components from specifications called
			Nix expressions, written in the Nix expression language.
			Disnix also uses the Nix expression language and describes service builds in a quite similar way.
			In this section, we first show how an
			ordinary Nix expression is written and then we show how this concept
			is used in a distributed setting.
		</para>
		
		<section>
			<title>Nix example</title>
			
			<example xml:id="ex-1-hello">
				<title>Nix expression for the GNU Hello package</title>
<programlisting>
{stdenv, fetchurl, perl}: <co xml:id='co-1-functionHeader' />

stdenv.mkDerivation { <co xml:id='co-2-mkDerivation' />
  name = "hello-2.1.1"; <co xml:id='co-3-name' />
  src = fetchurl { <co xml:id='co-4-src' />
    url = ftp://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz;
    md5 = "70c9ccf9fac07f762c24f2df2290784d";
  };
  buildInputs = [ perl ]; <co xml:id='co-5-buildInputs' />

  meta = { <co xml:id='co-6-meta' />
    description = "GNU Hello, a classic computer science tool";
    homepage = http://www.gnu.org/software/hello/;
  };
}
</programlisting>
			</example>
		
			<para>
				<xref linkend="ex-1-hello" /> shows a Nix expression for the GNU Hello package,
				a trivial package which contains the <command>hello</command> command
				showing the "Hello World" quote.
			</para>
		
			<calloutlist>
				<callout arearefs='co-1-functionHeader'>
					<para>
						A Nix expression is a function in which every
						arguments represents a dependency to build a package. This particular example takes 3 arguments:
						<varname>stdenv</varname>, <varname>fetchurl</varname> and <varname>perl</varname>.					
						<varname>stdenv</varname> is a package representing a standard
						environment containing basic UNIX build utilities,
						such as <code>cat</code>, <code>ls</code> and <code>gcc</code>.
						The <varname>fetchurl</varname> argument refers to a function that is used to download a source tarball
						from a particular URL. The <varname>perl</varname> argument is the Perl
						interpreter.
					</para>
				</callout>
				
				<callout arearefs='co-2-mkDerivation'>
					<para>
						In the body of the function, we invoke <code>stdenv.mkDerivation</code>
						which is used to compose an environment in which builds are performed.
						In this example, we have not specified the build steps that must be
						executed to build the package.
						If no build steps are given, then the builder assumes that this package is a GNU Autotools based
						package and basically executes the following instructions:
						<code>./configure; make; make install</code>.
					</para>
				</callout>
				
				<callout arearefs='co-3-name'>
					<para>
						Every package requires a name, which becomes part
						of the filename of the resulting package in the Nix store. It also gives a user
						the option to look it up after it has been installed.
					</para>
				</callout>
				
				<callout arearefs='co-4-src'>
					<para>
						This attribute specifies the location of source code that we want to compile. In our example,
						it is bound to the result of the <varname>fetchurl</varname>
						function invocation, which downloads the GNU Hello source tarball from the GNU FTP
						site. The MD5 hash is used to verify whether the source tarball matches the expected version.
					</para>
				</callout>
				
				<callout arearefs='co-5-buildInputs'>
					<para>
						This attribute is used to specify which packages must be used
						in the build environment. In our example, <command>perl</command> has been provided
						as a build input. The builder automatically sets the <varname>PATH</varname>
						and <varname>PERL5LIB</varname> environment variables, so that Perl can be found by
						build process that is executed in the builder environment. Not providing a
						dependency also makes it nearly impossible for a build process to find it.
					</para>
				</callout>
				
				<callout arearefs='co-6-meta'>
					<para>
						We can also specify some meta data for a package, so that we have a description
						and other useful information, such as the homepage and a license. These properties are not used
						while building the package.
					</para>
				</callout>
			</calloutlist>
		
			<para>
				Although the expression in <xref linkend="ex-1-hello" /> defines how to build a package from source code
				and its dependencies, we cannot use this expression to build the package directly because we do not
				know which version/variant of the dependencies we want to use, such as the version of Perl.
				Therefore, we have to <emphasis>compose</emphasis> the package in a seperate expression, in which we call
				the function shown ealier with its required parameters.
			</para>
		
			<example xml:id="ex-2-all-packages">
				<title><filename>all-packages.nix</filename>: Partial composition expression</title>
				
				<programlisting>
rec { <co xml:id='co-1-rec' />
  stdenv = ...;
  
  fetchurl = ...;
  
  perl = import ../pkgs/perl { <co xml:id='co-2-importPerl' />
    inherit stdenv fetchurl;
  };
  
  hello = import ../pkgs/hello { <co xml:id='co-3-importHello' />
    inherit stdenv fetchurl perl;
  };
  
  ...
}
				</programlisting>
			</example>
		
			<para>
				<xref linkend="ex-2-all-packages" /> shows a partial composition expression, in which the GNU Hello
				build function is called with its required function arguments. Moreover, all the other packages where GNU Hello dependends
				on are also composed in this expression.
			</para>
		
			<calloutlist>
				<callout arearefs='co-1-rec'>
					<para>
						This expression is a mutually recursive attribute set in which attributes can refer to each other.
						This is required, because we have to pass attributes as function parameters to every function
						imported in this file.
					</para>
				</callout>
				
				<callout arearefs='co-3-importHello'>
					<para>
						Here, the expression defined in <xref linkend="ex-1-hello" /> is imported and called
						with the its requires function parameters. The corresponding dependencies are
						composed in the same expression as well.
					</para>
					<para>
						We can also use the function parameters to make different kinds of compositions of the same package.
						For example, by replacing <code>inherit perl;</code> (which is syntactic sugar for <code>perl = perl;</code>)
						with <code>perl = perl54;</code> we can build GNU Hello using a different version of Perl.
					</para>
				</callout>
				
				<callout arearefs='co-2-importPerl'>
					<para>
						Moreover, all the dependencies of the GNU Hello package, such as the Perl interpreter
						are composed in this expression as well.
					</para>
				</callout>
			</calloutlist>
			
			<para>
				There is often a lot of boilerplate code that must be written to compose packages. However, in most
				cases, the function arguments of each package correspond to an attribute with the same name in the composition
				expression. The <code>callPackage {}</code> function can be used to take care of automatically composing the package by
				providing the compositions with the same names as the function arguments, considerably reducing the amount
				of code that must be written.
			</para>
			
			<example xml:id="ex-2b-all-packages">
				<title><filename>all-packages.nix</filename>: Simplified partial composition expression</title>
				
				<programlisting>
rec {
  stdenv = ...;
  
  fetchurl = ...;
  
  perl = callPackage ../pkgs/perl { };
  
  hello = callPackage ../pkgs/hello { };
  
  ...
}
				</programlisting>
			</example>
			
			<para>
				<xref linkend="ex-2-all-packages" /> shows a simplified equivalent of the previous composition expression
				using <code>callPackage {}</code>.
			</para>
		</section>
		
		<section>
			<title>Disnix example</title>
			
			<para>
				Similar to writing a Nix expressions for arbitrary packages,
				every service deployed by Disnix also requires a expression which describes how to
				build it from source code and its dependencies. A Disnix expression is
				nearly identical to an ordinary Nix expression. Its only difference is that it also
				takes inter-dependencies into account to configure and build a component.
			</para>
			
			<example xml:id="ex-3-zipcode-service">
				<title>Disnix expression for the <code>ZipcodeService</code></title>
<programlisting>
{stdenv, apacheAnt, axis2}: <co xml:id='co-1-outerFunctionHeader' />
{zipcodes}: <co xml:id='co-2-innerFunctionHeader' />

let
  contextXML = ''
    &lt;Context&gt;
      &lt;Resource name="jdbc/ZipcodeDB" auth="Container" type="javax.sql.DataSource"
                maxActivate="100" maxIdle="30" maxWait="10000"
                username="${zipcodes.target.mysqlUsername}" password="${zipcodes.target.mysqlPassword}" driverClassName="com.mysql.jdbc.Driver"
                url="jdbc:mysql://${zipcodes.target.hostname}:${toString (zipcodes.target.mysqlPort)}/${zipcodes.name}?autoReconnect=true" /&gt;
    &lt;/Context&gt; <co xml:id='co-3-contextXML' />
  '';
in
stdenv.mkDerivation { <co xml:id='co-4-mkDerivation' />
  name = "ZipcodeService";
  src = ../../../../services/webservices/ZipcodeService;
  buildInputs = [ apacheAnt ];
  AXIS2_LIB = "${axis2}/lib";
  AXIS2_WEBAPP = "${axis2}/webapps/axis2";
  buildPhase = "ant generate.war";
  installPhase = ''
    ensureDir $out/conf/Catalina
    cat > $out/conf/Catalina/ZipcodeService.xml &lt;&lt;EOF <co xml:id='co-5-cat-contextXML' />
    ${contextXML}
    EOF
    ensureDir $out/webapps
    cp *.war $out/webapps
  '';
}
</programlisting>
			</example>
			
			<para>
				<xref linkend="ex-3-zipcode-service" /> shows a Disnix expression for
				a particular web service component of the <code>StaffTracker</code>
				system, called <code>ZipcodeService</code>, which provides access
				to records in the <code>zipcode</code> database.
				A Disnix expression is a nested function (which has two
				function headers instead of one). The first function header refers to the
				intra-dependencies and the second header to the inter-dependencies.
			</para>
		
			<calloutlist>
				<callout arearefs='co-1-outerFunctionHeader'>
					<para>
						This is the outer function header, which specifies all the local dependencies,
						or <emphasis>intra-dependencies</emphasis>.
						Intra-dependencies are all build-time and run-time dependencies
						located on the same system. In order to build the <code>ZipcodeService</code>
						a <varname>stdenv</varname> is needed which is the standard
						environment containing basic UNIX utilities and build environment.
						The <varname>apacheAnt</varname> refers to
						Apache Ant that is required to compile the project. The <varname>axis2</varname> argument
						refers to the Apache Axis2 library that is used to implement web services.
					</para>
				</callout>
				
				<callout arearefs='co-2-innerFunctionHeader'>
					  <para>
						This is the inner function header, which defines all the <emphasis>inter-dependencies</emphasis>.
						The <varname>zipcodes</varname> argument refers to a database in which all the
						zipcodes are stored. The database may be running on a different machine as the
						<code>ZipcodeService</code> and is consulted by the web service through a TCP connection.
					  </para>
				</callout>
				
				<callout arearefs='co-3-contextXML'>
					<para>
						This string contains a so-called context XML file. This is a configuration
						file used by Apache Tomcat in order to configure web application specific settings.
						One of these configuration settings are database settings.
					</para>
					<para>
						To compose this string, we use the inter-dependency parameter: <varname>zipcodes</varname>
						to generate a JDBC connection string that can be used to connect to the
						remote database. The <varname>zipcodes</varname> argument is an attribute set,
						containing service and infrastructure properties. Each inter-dependency parameter contains
						the attribute <varname>targets</varname>, which contains a list of machines
						(and its properties) to which the inter-dependency is deployed.
						The <varname>target</varname> parameter is the first element from the 
						<varname>targets</varname> list.
						The properties of the inter-dependencies are defined in the services model, which
						we will show later. The properties in the <varname>targets</varname> attribute are
						defined in the infrastructure model (also shown later).
					</para>
				</callout>
				
				<callout arearefs='co-4-mkDerivation'>
					  <para>
						Like ordinary Nix expressions, we must call the derivation function to build a component
						from source code and to produce the output in the Nix store. It also requires
						you to define similar build attributes, such as <varname>name</varname> which is compulsory
						to build a package from source code.
					  </para>
				</callout>
				
				<callout arearefs='co-5-cat-contextXML'>
					  <para>
						Here, the context XML file defined earlier is written into a text file and bundled
						with the generated web application so that the configuration settings can be
						found by the Apache Tomcat web service. The Dysnomia module for Apache Tomcat
						takes care of the activation process.
					  </para>
				</callout>
			</calloutlist>
		
			<para>
				<xref linkend="ex-3-zipcode-service" /> shows you how to build and configure an Apache Axis2 web service.
				Other types of service may have different kinds configuration steps, but can also be configured and built
				by Disnix, like ordinary Nix packages.
				The only thing Disnix ensures is that the locations of the inter-dependencies and the properties of
				the services and machines are provided to the build environment of the service.

			</para>
		</section>
	</section>
	
	<section>
		<title>Intra-dependency composition</title>
		
		<para>
			Like ordinary Nix expressions, we cannot use the expression in <xref linkend="ex-3-zipcode-service" /> directly to build the
			service. We need to <emphasis>compose</emphasis> it by calling the function with its required arguments.
			With Disnix, we need to call compose a service twice. First, we have to compose this expression locally,
			by calling it with the required intra-dependency arguments. Later on, we have to compose it
			using the inter-dependency arguments.
		</para>
		
		<example xml:id="ex-4-intra-dependency-composition">
			<title>Intra-dependency composition for the <code>StaffTracker</code></title>
			
<programlisting>
{system, pkgs}:

rec { <co xml:id='co-3-rec' />
### Databases

  rooms = import ../pkgs/databases/rooms {
    inherit (pkgs) stdenv;
  };
  
  staff = import ../pkgs/databases/staff {
    inherit (pkgs) stdenv;
  };
  
  zipcodes = import ../pkgs/databases/zipcodes {
    inherit (pkgs) stdenv;
  };

### Web services + Clients
    
  ZipcodeService = import ../pkgs/webservices/ZipcodeService { <co xml:id='co-4-composition' />
    inherit (pkgs) stdenv apacheAnt axis2;
  };
  
  ZipcodeServiceClient = import ../pkgs/webservices/ZipcodeServiceClient {
    inherit (pkgs) stdenv apacheAnt axis2;
  };
  ...
  
### Web applications

  StaffTracker = import ../pkgs/webapplications/StaffTracker {
    inherit (pkgs) stdenv apacheAnt axis2;
    inherit GeolocationServiceClient RoomServiceClient StaffServiceClient ZipcodeServiceClient;
  };
}
</programlisting>
		</example>
		
		<para>
			<xref linkend="ex-4-intra-dependency-composition" /> shows a Nix expression in which
			services are composed locally by calling the expressions with its required intra-dependency arguments.
		</para>
		
		<calloutlist>
			<callout arearefs='co-3-rec'>
				 <para>
					Like the <code>pkgs/top-level/all-packages.nix</code> file in Nixpkgs, this composition expression
					is a mutually recursive attribute set in which attributes can refer to each other for
					exactly the same reasons.
				 </para>
			</callout>
			
			<callout arearefs='co-4-composition'>
				<para>
					Here, the expression from <xref linkend="ex-3-zipcode-service" /> is imported and called with the right
					intra-dependency arguments. The dependencies are either defined in the same model or in Nixpkgs.
				</para>
			</callout>
		</calloutlist>
		
		<para>
			We can also simplify the intra-dependency composition by composing our custom <code>callPackage {}</code> function:
		</para>
		
		<example xml:id="ex-4b-intra-dependency-composition">
			<title>Simplified intra-dependency composition for the <code>StaffTracker</code></title>
			
<programlisting>
{system, pkgs}:

let
  callPackage = pkgs.lib.callPackageWith (pkgs // self); <co xml:id='co-5-callPackage' />
  
  self = {
  ### Databases
    rooms = callPackage ../pkgs/databases/rooms { };
  
    staff = callPackage ../pkgs/databases/staff { };
  
    zipcodes = callPackage ../pkgs/databases/zipcodes { };

  ### Web services + Clients
    ZipcodeService = callPackage ../pkgs/webservices/ZipcodeService { };
  
    ZipcodeServiceClient = callPackage ../pkgs/webservices/ZipcodeServiceClient { };
    
    ...
  
  ### Web applications
    StaffTracker = callPackage ../pkgs/webapplications/StaffTracker { };
  };
}
</programlisting>
		</example>
		
		<para>
			In the simplified expression we compose a custom <code>callPackage {}</code> function <xref linkend="co-5-callPackage" />
			that first consults <code>self</code> containing our custom intra-dependency compositions and then any package in
			Nixpkgs.
		</para>
	</section>
	
	<section>
		<title>Services model</title>
		
		<para>
			Apart from specifiying how to build a package from source code and what its local (intra) dependencies
			are, we also need to know which components can distributed to machines in the network, what their inter-dependencies are and
			how to activate or deactivate them. These attributes are captured in the services model.
		</para>
		
		<example xml:id="ex-5-services-model">
			<title>Services model for the <code>StaffTracker</code></title>
			
<programlisting>
{distribution, system, pkgs}: <co xml:id='co-1-servicesHeader' />

let customPkgs = import ../top-level/all-packages.nix { inherit system; }; <co xml:id='co-2-importIntra' />
in
rec { <co xml:id='co-3-rec2' />
### Databases
  zipcodes = { 
    name = "zipcodes"; 
    pkg = customPkgs.zipcodes; 
    dependsOn = {};
    deployState = true; <co xml:id='co-4-deployState' />
    type = "mysql-database";
  };
  ...
  
### Web services  

  ZipcodeService = { <co xml:id='co-5-service' />
    name = "ZipcodeService"; <co xml:id='co-6-serviceName' />
    pkg = customPkgs.ZipcodeService; <co xml:id='co-7-pkg' />
    dependsOn = { <co xml:id='co-8-dependsOn' />
      inherit zipcodes;
    };
    type = "tomcat-webapplication"; <co xml:id='co-9-type' />
  };
  ...

### Web applications

  StaffTracker = {
    name = "StaffTracker";
    pkg = customPkgs.StaffTracker;
    dependsOn = {
      inherit GeolocationService RoomService StaffService ZipcodeService;
    };
    type = "tomcat-webapplication";
  };
}
</programlisting>
		</example>
		
		<para>
			<xref linkend="ex-5-services-model" /> represents the services model of the <code>StaffTracker</code>
			system. All the distributable components are defined, their inter-dependencies and other relevant
			properties. As may be observed, the structure of this file (i.e. the services and inter-dependency relationships)
			closely correspond to those defined in the earlier architecture diagram, shown in <xref linkend="fig-1-stafftracker" />.
		</para>
		
		<calloutlist>
			<callout arearefs='co-1-servicesHeader'>
				<para>
					In general, the services expression is a function, which takes three arguments.
					The <varname>distribution</varname> parameter refers to the distribution model,
					in which services are mapped onto machines in the network (this model is explained
					later). The <varname>system</varname> parameter is an identifier
					for the system architecture for services must be built. An example of an
					identifier is: <code>i686-linux</code> representing a 32-bit <code>x86</code> Linux machine.
					The <varname>pkgs</varname> parameter refers to the Nixpkgs collection for
					the corresponding system identifier. Nixpkgs contains a large collection of free and open source packages
					(including some proprietary ones).
				</para>
			</callout>
			
			<callout arearefs='co-2-importIntra'>
				<para>
					Here, the expression from <xref linkend="ex-4-intra-dependency-composition" /> is imported so that we can use the
					intra-dependency compositions of the system.
				</para>
			</callout>
			
			<callout arearefs='co-3-rec2'>
				<para>
					Like the intra-dependency composition expression in the previous example,
					the services expression is also a mutually recursive attribute set in which attributes
					can refer to each other. This is required to pass the services as inter-dependency
					arguments to each service.
				</para>
			</callout>
			
			<callout arearefs='co-4-deployState'>
				<para>
					This boolean value indicates that Disnix should also do state deployment, causing it
					to move data if the database if moved from one machine to another. Moreover, when executing
					the snapshot and restory utility a dump of the database is made, transferred and restored.
				</para>
				<para>
					By default, state deployment is disabled unless explicitly enabled.
					However, it can also be enabled by default if needed.
					See <xref linkend="chap-advanced-options" /> for more information.
				</para>
			</callout>
			
			<callout arearefs='co-5-service'>
				 <para>
					Every attribute represents a <emphasis>service</emphasis> (i.e. a distributable
					component). Services correspond to the components shown in the
					architecture in <xref linkend="fig-1-stafftracker" />.
				 </para>
			</callout>
			
			<callout arearefs='co-6-serviceName'>
				<para>
					Every service has a canonical name, so that it is known to which one is referred
					from the inter-dependency arguments. This name must match the attribute name.
				</para>
			</callout>
			
			<callout arearefs='co-7-pkg'>
				<para>
					For every service, we must know how to build it and what their intra- and inter-dependencies are. 
					This attribute refers to the intra-dependency closure of the service, which is composed in
					<xref linkend="ex-4-intra-dependency-composition" />. Later the inter-dependency
					arguments are passed to this intra-dependency composition.
				</para>
			</callout>
			
			<callout arearefs='co-8-dependsOn'>
				<para>
					We also need to know for each service what the inter-dependencies actually are. In this
					particular example, we specify that the attribute <varname>zipcodes</varname> (a service also
					defined in the services model) is an inter-dependency
					of the <code>ZipcodeService</code>. 
				</para>
				<para>
					As with intra-dependency parameters, you can also create different inter-dependency
					compositions. For instance by specifying: <code>zipcodes = mycustomzipcodes;</code>
					instead of <code>inherit zipcodes;</code> (syntactic sugar for 
					<code>zipcodes = zipcodes;</code>),
					you can configure the <code>ZipcodeService</code> to use a different database.
				</para>
			</callout>
			
			<callout arearefs='co-9-type'>
				<para>
					Finally, we must know how to activate and deactive a service, and how to snapshot and restore
					their state. Since services can represent
					nearly anything, such as a database or web application, we cannot perform this step generically.
					This attribute specifies the type of the service, which is used by Disnix to consult Dysnomia
					on the target machine performing the actual activation or deactivation process. 
				</para>
				<para>
					Various types of services are supported by Dysnomia, such as: <code>tomcat-webapplication</code> which will activate
					a web application on Apache Tomcat, <code>mysql-database</code> which will import
					a MySQL database schema on first startup and <code>process</code> which activates a generic
					UNIX process. Moreover, a <code>wrapper</code> type exists, which allows the developer to include
					his own activation script inside the service.
				</para>
			</callout>
		</calloutlist>
	</section>
	
	<section>
		<title>Infrastructure model</title>
		
		<para>
			Apart from the services and their configuration properties, we also need to know what machines are
			available and their relevant properties and capabilities. These attributes are captured in the
			infrastructure model.
		</para>
		
		<example xml:id="ex-6-infrastructure-model">
			<title>Infrastructure model</title>
			
<programlisting>
{
  test1 = {
    hostname = "test1.example.org";
    tomcatPort = 8080;
    system = "i686-linux";
  };
  
  test2 = { <co xml:id='co-1-target' />
    hostname = "test2.example.org"; <co xml:id='co-2-hostname' />
    system = "x86_64-linux"; <co xml:id='co-3-system' />
    numOfCores = 1; <co xml:id='co-4-numOfCores' />
    tomcatPort = 8080;
    mysqlPort = 3306; <co xml:id='co-5-mysqlPort' />
    mysqlUsername = "root";
    mysqlPassword = "admin";
    targetProperty = "hostname"; <co xml:id='co-6-targetProperty' />
    clientInterface = "disnix-ssh-client"; <co xml:id='co-7-clientInterface' />
  }; 
}
</programlisting>
		</example>
		
		<para>
			<xref linkend="ex-6-infrastructure-model" /> shows an infrastructure model describing 2 machines, which can be used to
			deploy the <code>StaffTracker</code> services to.
		</para>
		
		<calloutlist>
			  <callout arearefs='co-1-target'>
				<para>
					The infrastructure model is an attribute set in which each attribute represents a 
					machine in the network. This attribute refers to the properties of a machine called
					<code>test2</code>.
				</para>
			  </callout>
			  
			  <callout arearefs='co-2-hostname'>
				  <para>
					In order to perform deployment steps remotely, we need to know how to connect
					to the machine. By default, the <code>hostname</code> attribute is used for this.
					Disnix can be configured to use a different property as well through a command-line
					parameter or environment variable.
				  </para>
			  </callout>
			  
			  <callout arearefs='co-3-system'>
				<para>
					A machine in the network may have a different system architecture as the coordinator machine.
					The <code>system</code> attribute can be used to specify the actual architecture of a target machine. By specifying
					an architecture. the coordinator will invoke Nix to build the service for that particular
					platform.
				</para>
				<para>
					In some cases, Nix may not be able to build a service directly, because it is incapable
					to run a compiler for that platform or it has no dedicated build machine with the
					right architecture to delegate the build to.
					In such cases, you can either build the service on a target machine in the network.
					By omitting the <code>system</code> attribute, Disnix builds the service for
					the same architecture as the coordinator machine.
				</para>
			  </callout>
			  
			  <callout arearefs='co-4-numOfCores'>
				<para>
					In the activation phase, Disnix tries to concurrently activate as many services possible.
					The <code>numOfCores</code> attribute can be used to indicate the amount of CPU cores available on
					the target machine. If, for example, this value is set to 2, Disnix tries to activate two services
					concurrently on this machine when possible.
				</para>
				<para>
					If this attribute is omitted, it will default to 1.
				</para>
			  </callout>
			  <callout arearefs='co-6-targetProperty'>
				  <para>
					This is a reserved property defining which attribute in this attribute set
					specifies how to connect to this machine. If this attribute is not specified
					then the value provided by the <code>--interface</code> parameter, or
					<code>DISNIX_TARGET_PROPERTY</code> environment variable is used, which
					defaults to <code>hostname</code>.
				  </para>
				  <para>
					This is an advanced property that should only be used in special circumstances.
					See <xref linkend="chap-advanced-options" /> for more information.
				  </para>
			  </callout>
			  <callout arearefs='co-7-clientInterface'>
				  <para>
					This reserved property specifies which executable needs to be run to connect
					to the target machine. If this attribute is not specified then the value provided
					by the <code>--interface</code> parameter, or the <code>DISNIX_CLIENT_INTERFACE</code>
					environment variable is used, which defaults to <code>disnix-ssh-client</code>.
				  </para>
				  <para>
					This is an advanced property that should only be used in special circumstances.
					See <xref linkend="chap-advanced-options" /> for more information.
				  </para>
			  </callout>
			  <callout arearefs='co-5-mysqlPort'>
				  <para>
					The other properties of a machine can be freely chosen and are used by the
					Dysnomia modules to activate a particular service. For instance, the
					<code>mysqlPort</code> specifies on which port the MySQL can be reached.
					The MySQL properties in this model are used by the MySQL Dysnomia module.
				  </para>
			  </callout>
		</calloutlist>
		
		<para>
			Although you can specify what a network configuration looks like in an infrastructure model,
			you as a developer or system administrator has to ensure that the machines in the
			network match the given configuration. There are some tools which can assist you while doing this job. 
			For instance, if only NixOS machines are used, an infrastructure model can be generated
			from a network of NixOS configurations.
		</para>
	</section>
	
	<section>
		<title>Distribution model</title>
		
		<para>
			Disnix also needs to know to which machine each service must be deployed. A distribution
			model is used to specify this.
		</para>
		
		<example xml:id="ex-7-distribution-model">
			<title>Distribution model for the <code>StaffTracker</code></title>
			
<programlisting>
{infrastructure}:

{
  zipcodes = [ infrastructure.test2 ]; <co xml:id='co-1-zipcodes' />
  ZipcodeService = [ infrastructure.test1 ]; <co xml:id='co-2-ZipcodeService' />
  StaffTracker = [ infrastructure.test1 infrastructure.test2 ]; <co xml:id='co-3-StaffTracker' />
  ...
}
</programlisting>
		</example>
		
		<para>
			<xref linkend="ex-7-distribution-model" /> shows a distribution model for a particular
			deployment scenario of the <code>StaffTracker</code> system.
		</para>
		
		<calloutlist>
			<callout arearefs='co-1-zipcodes'>
				<para>
					This attribute assignment states that the <code>zipcodes</code> service should be
					deployed to machine <code>test2</code>.
					The machine and its properties can be accessed by using the <varname>target</varname> property
					on an inter-dependency argument in a Disnix expression, such as
					<xref linkend="ex-3-zipcode-service" />.
				</para>
			</callout>
			
			<callout arearefs='co-2-ZipcodeService'>
				<para>
					This attribute assignment states that the <code>ZipcodeService</code> service should be
					deployed to machine <code>test1</code>.
				</para>
			</callout>
			
			<callout arearefs='co-3-StaffTracker'>
				<para>
					This attribute assignment states that the <code>StaffTracker</code> service should be
					deployed to both <code>test1</code> and <code>test2</code>. By providing multiple
					machines, you can implement features such as a fallback mechanism or load balancing.
					This list of machines can be accessed by using the <varname>targets</varname> property
					on an inter-dependency argument in a Disnix expression, such as
					<xref linkend="ex-3-zipcode-service" />.
				</para>
			</callout>
		</calloutlist>
	</section>
</chapter>
