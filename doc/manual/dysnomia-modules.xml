<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap-dysnomia-modules">

	<title>Dysnomia modules</title>

	<para>
		As explained in <xref linkend="chap-basicusage" />, a type is assigned to each service in the services model. 
		In <xref linkend="chap-architecture" /> we have shown the architecture of the Disnix service (running on every target machine)
		that consults Dysnomia to execute these activities.
		Types are used to determine how to non-generic deployment activities, such as activating or deactivating a service in a container.
		Each type is mapped to a Dysnomia module that performs the actual deployment steps.
	</para>
	<para>
		In this chapter, we explain how Dysnomia modules work.
	</para>
	
	<section>
		<title>Structure</title>
		
		<para>
			Basically, every Dysnomia module implements a process, which takes two command-line parameters. The first parameter is
			one of the following:
		</para>
		
		<itemizedlist>
			<listitem><simpara><varname>activate</varname>. Invoked to activate a service in a container</simpara></listitem>
			<listitem><simpara><varname>deactivate</varname>. Invoked to deactivate a service in a container</simpara></listitem>
			<listitem><simpara><varname>lock</varname>. Invoked for each service before the activation phase starts</simpara></listitem>
			<listitem><simpara><varname>unlock</varname>. Invoked for each service after the activation phase</simpara></listitem>
			<listitem><simpara><varname>snapshot</varname>. Invoked to capture the state of the service</simpara></listitem>
			<listitem><simpara><varname>restore</varname>. Invoked to restore the state of the service</simpara></listitem>
			<listitem><simpara><varname>collect-garbage</varname>. Invoked to delete the state of the service</simpara></listitem>
		</itemizedlist>
		
		<para>
			The second parameter is a Nix path referring to a service. Moreover, all the container properties in the infrastructure
			model to which the service is deployed are passed as environment variables so that all relevant deployment properties are known.
		</para>
	</section>
	
	<section>
		<title>Dysnomia module for the <code>mysql-database</code> type</title>
		
		<example xml:id="ex-mysql-database">
			<title>MySQL database Dysnomia module</title>
			
			<programlisting>
#!/bin/bash
set -e
set -o pipefail
shopt -s nullglob

# Autoconf settings
export prefix=@prefix@

# Import utility functions
source @datadir@/@PACKAGE@/util

determineComponentName $2
checkStateDir
determineTypeIdentifier $0
composeSnapshotsPath
composeGarbagePath
composeGenerationsPath

case "$1" in
    activate) <co xml:id='co-activate' />
        # Initalize the given schema if the database does not exists
        if [ "$(echo "show databases" | @mysql@ --user=$mysqlUsername --password=$mysqlPassword -N | grep -x $componentName)" = "" ]
        then
            ( echo "create database $componentName;"
              echo "use $componentName;"
              
              if [ -d $2/mysql-databases ]
              then
                  cat $2/mysql-databases/*.sql
              fi
            ) | @mysql@ --user=$mysqlUsername --password=$mysqlPassword -N
        fi
        unmarkStateAsGarbage
        ;;
    deactivate) <co xml:id='co-deactivate' />
        markStateAsGarbage
        ;;
    snapshot) <co xml:id='co-snapshot' />
        tmpdir=$(mktemp -d)
        cd $tmpdir
        @mysqldump@ --single-transaction --quick --user=$mysqlUsername --password=$mysqlPassword $componentName | head -n-1 | xz > dump.sql.xz
        
        hash=$(cat dump.sql.xz | sha256sum)
        hash=${hash:0:64}
        
        if [ -d $snapshotsPath/$hash ]
        then
            rm -Rf $tmpdir
        else
            mkdir -p $snapshotsPath/$hash
            mv dump.sql.xz $snapshotsPath/$hash
            rmdir $tmpdir
        fi
        createGenerationSymlink $snapshotsPath/$hash
        ;;
    restore) <co xml:id='co-restore' />
        determineLastSnapshot
        
        if [ "$lastSnapshot" != "" ]
        then
            ( echo "use $componentName;"
              xzcat $snapshotsPath/$lastSnapshot/dump.sql.xz
            ) | @mysql@ --user=$mysqlUsername --password=$mysqlPassword -N
        fi
        ;;
    collect-garbage) <co xml:id='co-collect-garbage' />
        if [ -f $garbagePath ]
        then
            echo "drop database $componentName;" | @mysql@ --user=$mysqlUsername --password=$mysqlPassword -N
            unmarkStateAsGarbage
        fi
        ;;
esac
			</programlisting>
		</example>
		
		<para>
			<xref linkend="ex-mysql-database" /> shows the Dysnomia module used for the <code>mysql-database</code> type:
		</para>
		
		<calloutlist>
			<callout arearefs="co-activate">
				<para>
					This part performs the activation step of a MySQL service. In this step,
					we first check whether the database already exists. If the database is not there yet,
					we create a MySQL database having the same name as the Nix component
					and finally we import the attached MySQL dump (defining the schema) into the database.
					Moreover, it also marks the database as being used, so that it will not be garbage collected.
				</para>
			</callout>
			
			<callout arearefs="co-deactivate">
				<para>
					The deactivation step consists of marking the database as garbage, so that it
					will be removed by the garbage collector.
				</para>
			</callout>
			
			<callout arearefs="co-snapshot">
				<para>
					Dumps the state of the MySQL database in a single transaction into a dump file and places
					it in the Dysnomia snapshot folder using the output hash as a naming convention. If a dump
					with an identical hash exists, then the snapshot is discarded, because there is no
					reason to store the same output twice.
					After the snapshot has been taken, the generation symlink (that indicates what the last snapshot
					is) is updated.
				</para>
			</callout>
			
			<callout arearefs="co-restore">
				<para>
					Determines what the latest snapshot of the database is and restores the corresponding snapshot.
					If no snapshot exists, it does nothing.
				</para>
			</callout>
			
			<callout arearefs="co-collect-garbage">
				<para>
					Checks whether the database has been marked as garbage and drops it if this is the case.
					Otherwise, it does not nothing.
				</para>
			</callout>
		</calloutlist>
	</section>
	
	<section>
		<title>Implementing a custom activation interface</title>
		
		<para>
			Although the <filename>dysnomia</filename> package contains plugins
			for commonly found services, there may be special cases where the activation and deactivation procedure have to be executed
			directly by the services. For example, because there is no activation type available or the service requires a specialized
			activation procedure.
		</para>
		
		<para>
			For these purposes, the <code>wrapper</code> type can be used. Basically, the wrapper module invokes
			the <filename>bin/wrapper</filename> executable in the Nix package with the first
			parameter passed to the activation script (which is <varname>activate</varname>, <varname>deactivate</varname> etc.).
			Then this process performs all the steps to activate the component and so on.
		</para>
		
		<example xml:id="ex-tcp-proxy-wrapper">
			<title>Disnix TCP proxy wrapper script</title>
			
			<programlisting>
#!/bin/bash -e

export PATH=@PREFIX@/bin:$PATH

case "$1" in
    activate)
        nohup disnix-tcp-proxy @srcPort@ @destHostname@ @destPort@ /tmp/disnix-tcp-proxy-@srcPort@.lock > /var/log/$(basename @PREFIX@).log &amp; pid=$!
        echo $pid > /var/run/$(basename @PREFIX@).pid
        ;;
    deactivate)
        kill $(cat /var/run/@PREFIX@.pid)
        rm -f /var/run/$(basename @PREFIX@).pid
        ;;
    lock)
        if [ -f /tmp/disnix-tcp-proxy-@srcPort@.lock ]
        then
            exit 1
        else
            touch /tmp/disnix-tcp-proxy-@srcPort@.lock
            
            if [ -f /var/run/$(basename @PREFIX@).pid ]
            then
                while [ "$(disnix-tcp-proxy-client)" != "0" ]
                do
                    sleep 1
                done
            fi
        fi
        ;;
    unlock)
        rm -f /tmp/disnix-tcp-proxy-@srcPort@.lock
        ;;
esac
			</programlisting>
		</example>
		
		<para>
			<xref linkend="ex-tcp-proxy-wrapper" /> shows an example of a wrapper script used for the
			<link xlink:href="https://github.com/svanderburg/disnix-proxy-example">TCP proxy example</link>
			available from my Github page. As you may notice, the structure is very
			similar to an activation script, since it also contains the <code>activate</code> and <code>deactivate</code> steps.
		</para>
		
		<para>
			Moreover, this wrapper script also implements a <code>lock</code> and <code>unlock</code> step, which notify
			the service that an upgrade is starting (a phase in which services are deactivated and activated and temporarily
			makes certain parts of the system unavailable for use) and that the upgrade phase is finished.
		</para>
	</section>
</chapter>
