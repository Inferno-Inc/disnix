<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap-advanced-options">

	<title>Advanced options</title>

	<section>
		<title>Configuring a custom connection protocol</title>
		
		<para>
			As mentioned before, the Disnix service consists of a core service and a protocol wrapper.
			By default, an SSH wrapper is used, but other types of wrappers can be used as well,
			such as SOAP, provided by the external <code>DisnixWebService</code> package.
		</para>
		
		<para>
			The coordinator machine invokes an external process which performs communication with
			the Disnix service. By default <command>disnix-ssh-client</command> is consulted. A different
			client can be used by either setting the <varname>DISNIX_CLIENT_INTERFACE</varname>
			environment variable with the path to the executable or by using the
			<option>--interface</option> command-line option, for commands such as
			<command>disnix-env</command>.
		</para>
		
		<para>
			For example, by specifying:
		</para>
		
<screen>
$ export DISNIX_CLIENT_INTERFACE=disnix-soap-client
</screen>

		<para>
			The <command>disnix-soap-client</command> command is used to communicate with a remote Disnix service.
		</para>
		
		<para>
			Apart from configuring the coordinator machine, each target machine must also run the
			connection wrapper so that it can use the given protocol. Refer to the documentation
			of the extension for specific instructions.
		</para>
		
		<para>
			Another wrapper is <command>disnix-client</command> that 
			connects directly to the D-Bus system bus to invoke Disnix 
			service operations. This wrapper is useful for debugging purposes, but you cannot use this client
			for remote connections.
		</para>
		
		<para>
			In some cases, also the target property must be configured. By default, Disnix uses the
			<varname>hostname</varname> property in the infrastructure model, to determine
			how to connect to the remote Disnix service in order to perform remote deployment steps.
			This property is not suitable for every protocol. A web service interface
			interace, for example, requires an URL.
		</para>
		<para>
			The connection attribute can be changed by either setting the <envar>DISNIX_TARGET_PROPERTY</envar>
			environment variable with the attribute name that contains the address of the remote
			Disnix service or by using the <option>--target-property</option> command-line option.
		</para>
		
		<para>
			For example, by specifying:
		</para>
		
<screen>
$ export DISNIX_TARGET_PROPERTY=sshTarget
</screen>
		
		<para>
			The <varname>sshTarget</varname> attribute defined in the infrastructure model is used
			to determine the address of the Disnix service.
		</para>
		<para>
			It is also possible to define a target property and client interface for each individual
			machine to support multi connection protocol deployment. See <xref linkend="ex-infrastructure-model" />
			for more information.
		</para>
	</section>

	<section>
		<title>Deploying a system locally</title>

		<para>
			For experimentation purposes and small systems, it can also be quite useful to deploy a system
			entirely to a local machine. As described in the previous section, it is possible to specify
			alternative client interfaces to use different communication protocols.
		</para>

		<para>
			To directly connect to the local Disnix D-Bus service (without any network connection), you
			can change the client interface to:
		</para>

<screen>
$ export DISNIX_CLIENT_INTERFACE=disnix-client
</screen>

		<para>
			It is also possible to completely bypass the D-Bus service and directly execute the deployment
			activities, with the following client interface:
		</para>

<screen>
$ export DISNIX_CLIENT_INTERFACE=disnix-runactivity
</screen>


		<para>
			The above client interface is particularly useful for unprivileged user deployments. In addition
			to a single-user Nix installation, it does not require anything else.
		</para>

		<example xml:id="ex-infrastructure-local">
			<title>Infrastructure model describing localhost</title>
<programlisting>
{
  localhost.properties.hostname = "localhost";
}
</programlisting>
		</example>


		<para>
			After changing the client interface, you can write an infrastructure model with one machine
			representing your <varname>localhost</varname>, for example as shown in <xref linkend="ex-infrastructure-local" />,
			and map all services in the distribution model to the <varname>localhost</varname> machine.
		</para>
	</section>

	<section>
		<title>Managing multiple distributed system configurations</title>
		
		<para>
			By default, Disnix assumes that the models that you are currently using represent one particular
			distributed environment. You can also use multiple profiles, which allow you to maintain
			multiple distributed system environments from one coordinator machine.
			By using the <option>--profile</option> option for the <command>disnix-env</command>
			and <command>disnix-activate</command> commands, you can specify which profile you want
			to use, so that they do not interfere with each other.
		</para>
		
		<para>
			The following instructions will install a particular distributed environment:
		</para>
		
<screen>
$ disnix-env -s my-default-services.nix -i my-default-infrastructure.nix -d my-default-distribution.nix
</screen>
		
		<para>
			By running the following command with three models of another distributed environment:
		</para>

<screen>
$ disnix-env -s my-other-services.nix -i my-other-infrastructure.nix -d my-other-distribution.nix
</screen>

		<para>
			Disnix will <emphasis>upgrade</emphasis> the previous the default environment to match the models defined
			in the other environment, which is not desirable.
			However, by using the <option>--profile</option> option Disnix
			deploys the new distributed system without looking to the default system's deployment
			state and maintains two seperate configuration next to each other:
		</para>

<screen>
$ disnix-env --profile other -s my-other-services.nix -i my-other-infrastructure.nix -d my-other-distribution.nix
</screen>

		<para>
			Besides using the <option>--profile</option> option, you can also use an environment variable:
		</para>
<screen>
$ export DISNIX_PROFILE=other
</screen>
	</section>
	
	<section>
		<title>Enabling state deployment by default</title>
		
		<para>
			If it desired to let Disnix manage state, you must annotate the corresponding services in the service model.
			However, it is also possible to override Disnix's default behaviour to enable state manage management for all
			services by default.
		</para>
		
		<para>
			Global state deployment can be enabled by providing the <option>--deploy-state</option> command-line option to
			commands such as <command>disnix-env</command> or by setting the following environment variable:
		</para>
		
<screen>
$ export DISNIX_DEPLOY_STATE=1
</screen>
	</section>
	
	<section>
		<title>Multi-container deployment</title>
		
		<para>
			As described in <xref linkend="chap-basicusage" />, when mapping a service to a target machine in the distribution model,
			Disnix automatically maps the service to the appropriate container, by referring to a container with the same name as the type
			the service belongs to.
		</para>
		
		<para>
			In some unconventional scenarios, it may be desired to run multiple instances of the same container on one machine. In such
			cases, automapping no longer works and a different notation is required. In Disnix, the following mapping in the distribution model
			(mapping a service to a list of target machines in the infrastructure model):
		</para>
		
<screen>
ZipcodeService = [ infrastructure.test2 ];
</screen>
		
		<para>
			Is equivalent to the mapping in the following notation:
		</para>
  
<screen>
ZipcodeService = {
  targets = [ { target = infrastructure.test2; } ];
};
</screen>
		
		<para>
			In the above notation, we define an attribute set in which the <varname>targets</varname> property
			refers to a list of attribute sets defining all possible attributes of a mapping. This alternative notation
			is more verbose and allows more mapping properties to be specified.
		</para>
		
		<example xml:id="ex-infrastructure-containers-model">
			<title>Infrastructure model with multiple container instances</title>
<programlisting>
{
  test1 = {
    properties = {
      hostname = "test1.example.org";
    };

    containers = {
      tomcat-webapplication-primary = {
        tomcatPort = 8080;
      };

      tomcat-webapplication-secondary = {
        tomcatPort = 8081;
      };
    };
  };

  test2 = {
    properties = {
      hostname = "test2.example.org";
    };

    containers = {
      mysql-database-primary = {
        mysqlPort = 3306;
        mysqlUsername = "root";
        mysqlPassword = "admin";
      };

      mysql-database-secondary = {
        mysqlPort = 3307;
        mysqlUsername = "root";
        mysqlPassword = "secret";
      };
    };
  }; 
}
</programlisting>
		</example>
		
		<para>
			<xref linkend="ex-infrastructure-containers-model" /> is based on the StaffTracker infrastructure model
			shown in <xref linkend="ex-infrastructure-model" />. In this modified infrastructure model, the <varname>test1</varname> machine
			hosts two Apache Tomcat servers (one listening on TCP port 8080 and the other on TCP port 8081) and the <varname>test2</varname>
			machine hosts two MySQL DBMSes (one listening on TCP port 3306 and the other on TCP port 3307).
			Because we have two instances of each container and their names do not correspond to the services types, automapping
			no longer works.
		</para>

		<example xml:id="ex-distribution-containers-model">
			<title>Distribution model for the <code>StaffTracker</code> mapping to multiple containers</title>
			
<programlisting>
{infrastructure}:

{
  zipcodes = {
    targets = [ { target = infrastructure.test2; container = "mysql-database-primary"; } ]; <co xml:id='co-mysql-database-primary' />
  };
  ZipcodeService = {
    targets = [ { target = infrastructure.test1; container = "tomcat-webapplication-secondary"; } ]; <co xml:id='co-tomcat-webapplication-secondary' />
  };
  StaffTracker = {
    targets = [ <co xml:id='co-multi-containers' />
      { target = infrastructure.test1; container = "tomcat-webapplication-primary"; }
      { target = infrastructure.test1; container = "tomcat-webapplication-secondary"; }
    ];
  };
  ...
}
</programlisting>
		</example>

		<para>
			<xref linkend="ex-distribution-containers-model" /> shows a distribution model using the alternative
			notation to directly control the container mappings:
		</para>
			
		<calloutlist>
			<callout arearefs='co-mysql-database-primary'>
				<para>
					This mapping states that the <varname>zipcodes</varname> database should be deployed to the first MySQL instance container (<varname>mysql-database-primary</varname>)
					on machine <varname>test2</varname>.
				</para>
			</callout>
			<callout arearefs='co-tomcat-webapplication-secondary'>
				<para>
					This mapping states that the <varname>ZipcodeService</varname> application should be deployed to the second Apache Tomcat container (<varname>tomcat-webapplication-secondary</varname>)
					on machine <varname>test1</varname>.
				</para>
			</callout>
			<callout arearefs='co-multi-containers'>
				<para>
					It also possible to map a service to multiple containers on multiple machines. This line states that the <varname>StaffTracker</varname> service should be deployed
					to both the first and second Apache Tomcat container on machine <varname>test1</varname>.
				</para>
			</callout>
		</calloutlist>

		<para>
			As with single container instance deployments, we can also deploy multiple instances of container providing services, as described in <xref linkend="chap-exposingcontainers" />.
			For example, to allow two Apache Tomcat instances to co-exist on one machine, we must configure them in such a way that their
			resources do not conflict:
		</para>
		<example xml:id="ex-services-multiple-container-providing">
			<title>Services model providing two instances of a container providing service</title>
<programlisting>
{ pkgs, system, distribution, invDistribution
, stateDir ? "/var"
, runtimeDir ? "${stateDir}/run"
, logDir ? "${stateDir}/log"
, cacheDir ? "${stateDir}/cache"
, tmpDir ? (if stateDir == "/var" then "/tmp" else "${stateDir}/tmp")
, forceDisableUserChange ? false
, processManager ? "systemd"
}:

let
  constructors = import ../../../nix-processmgmt/examples/service-containers-agnostic/constructors.nix {
    inherit pkgs stateDir runtimeDir logDir cacheDir tmpDir forceDisableUserChange processManager;
  };
in
rec {
  simpleAppservingTomcat-primary = constructors.simpleAppservingTomcat {
    instanceSuffix = "-primary";
    httpPort = 8080;
    httpsPort = 8443;
    serverPort = 8005;
    ajpPort = 8009;
    commonLibs = [ "${pkgs.mysql_jdbc}/share/java/mysql-connector-java.jar" ];
    type = "systemd-unit";
  }; # This resulting attribute set exposes the property: providesContainer = "tomcat-webapplication-primary"

  simpleAppservingTomcat-secondary = constructors.simpleAppservingTomcat {
    instanceSuffix = "-secondary";
    httpPort = 8081;
    httpsPort = 8444;
    serverPort = 8006;
    ajpPort = 8010;
    commonLibs = [ "${pkgs.mysql_jdbc}/share/java/mysql-connector-java.jar" ];
    type = "systemd-unit";
  }; # This resulting attribute set exposes the property: providesContainer = "tomcat-webapplication-secondary"

  ...
}
</programlisting>
		</example>

		<para>
			The partial services model in <xref linkend="ex-services-multiple-container-providing" /> specifies two Apache Tomcat instances that
			can co-exist on the same machine, because their resources, such as the TCP ports they need to bind to, have been configured in
			such a way that they do not conflict.
		</para>

		<para>
			We can automatically deploy Java web applications to these Apache Tomcat container services, by mapping them to the same machine
			in the distribution model:
		</para>

		<example xml:id="ex-distribution-multiple-container-providing">
			<title>Distribution model mapping application services to multiple instances of container providers</title>
<programlisting>
{infrastructure}:

{
  # Container providers

  simpleAppservingTomcat-primary = [ infrastructure.test2 ]; <co xml:id="map-multiple-container-providers" />
  simpleAppservingTomcat-secondary = [ infrastructure.test2 ];

  # Application components

  GeolocationService = { <co xml:id="map-multiple-application-services" />
    targets = [
      { target = infrastructure.test2;
        container = "tomcat-webapplication-primary";
      }
    ];
  };
  RoomService = {
    targets = [
      { target = infrastructure.test2;
        container = "tomcat-webapplication-secondary";
      }
    ];
  };
  StaffTracker = {
    targets = [
      { target = infrastructure.test2;
        container = "tomcat-webapplication-secondary";
      }
    ];
  };
  ...
}
</programlisting>
		</example>

		<para>
			<xref linkend="ex-distribution-multiple-container-providing" /> is a partial distribution model that does the following:
		</para>

		<calloutlist>
			<callout arearefs='map-multiple-container-providers'>
				<para>
					The mappings in this section distribute two Apache Tomcat instances to the same machine: <varname>test2</varname>.
					As shown in <xref linkend="ex-services-multiple-container-providing" /> they can co-exist one the same
					machine, because they do not require any conflicting resources.
				</para>
			</callout>
			<callout arearefs='map-multiple-application-services'>
				<para>
					The remaining entries in the distribution model map application services to the primary and secondary Apache
					Tomcat instances. Disnix knows that the Apache Tomcat services in the first section
					<xref linkend="map-multiple-container-providers" /> are their target containers, because
					they are distributed to the same machine (<varname>test2</varname>) and expose containers with the same identifiers
					as the <varname>container</varname> property in the mapping (<varname>tomcat-webapplication-primary</varname> and
					<varname>tomcat-webapplication-secondary</varname>).
				</para>
			</callout>
		</calloutlist>
	</section>

	<section>
		<title>Diagnosing errors and executing arbitrary maintenance tasks</title>

		<para>
			When running production systems, you cannot get around unforeseen incidents and problems, such as crashes and database inconsistencies.
			To make diagnosing errors and executing arbitrary maintenance tasks more convenient, the <command>disnix-diagnose</command> can be used.
			The purpose of this tool is to spawn remote shell sessions containing all relevant configuration settings as environment variables.
			Furthermore, it will display command-line suggestions with command maintenance tasks.
		</para>

		<para>
			To spawn a diagnostic interactive shell for a service, such as the <code>staff</code> MySQL database, simply run:
		</para>

<screen>
$ disnix-diagnose -S staff
</screen>

		<para>
			The above command will query the deployment configuration of the system, remotely connects to the machine (typically through SSH) and
			spawns a diagnostic shell session.
		</para>

		<para>
			It is also possible to execute arbitrary shell commands in the session. For example, the following command will query all staff records:
		</para>

<screen>
$ disnix-diagnose -S staff --command 'echo "select * from staff" | mysql -u $mysqlUsername -p $mysqlPassword staff'
</screen>

		<para>
			Disnix can also host redundant instances of the same service. In such cases, you must refine the search query with a target or container
			parameter. The following instruction specifies that we want to connect to the <code>StaffTracker</code> service deployed to machine
			<code>test1</code>:
		</para>

<screen>
$ disnix-diagnose -S StaffTracker --target test1
</screen>

		<para>
			It is still possible to execute remote shell commands for redundantly deployed instances. For example, the following command may
			be executed several times:
		</para>

<screen>
$ disnix-diagnose -S StaffTracker --command 'echo I may see this message multiple times!'
</screen>

		<para>
			In some cases, you may want to execute other kinds of maintenance tasks or you simply want to know where a particular service resides.
			This can be done by running the following command:
		</para>

<screen>
$ disnix-diagnose -S StaffTracker --show-mappings
</screen>

		<para>
			As a remark: the diagnose tool does not work with all Disnix client instances. Currently, only connectors that use SSH are supported!
		</para>
	</section>

	<section>
		<title>Propagating arbitrary function parameters to the input models</title>

		<para>
			Most of the input models that Disnix uses are function definitions that require a standard set of parameters.
			It is also possible to extend this set of standard parameters with custom parameters, and propagate arbitrary
			values from the command-line.
		</para>

		<para>
			For example, the services model shown earlier in <xref linkend="ex-services-multiple-container-providing" />
			defines a number of additional parameters beyond the required parameters in the services model
			(<varname>pkgs</varname>, <varname>system</varname>, <varname>distribution</varname> and <varname>invDistribution</varname>).
		</para>

		<para>
			In the example, it is also possible to configure the process manager (<varname>processManager</varname>),
			the default state directory (<varname>stateDir</varname>) and specify whether we
			want to force disabling changing user permissions (<varname>forceDisableUserChange</varname>), that
			is particularly useful to facilitate unprivileged user deployments.
			If we want to easily change these parameters, we can propagate a set of parameters on the command-line.
		</para>

<screen>
$ disnix-env -s services.nix -i infrastructure.nix -d distribution.nix --extra-params '{ processManager = "sysvinit"; stateDir = "/home/sander/var"; forceDisableUserChange = true; }'
</screen>
		<para>
			The above command-line invocation changes the process manager to: <code>sysvinit</code>, the state directory
			to: <code>/home/sander/var</code> and enables forcing user permissions not to change.
			This particular configuration allows me to deploy an entire system as an unprivileged user.
		</para>

		<para>
			In addition to the services model, it is also possible to use the same mechanism to propagate extra
			parameters to the distribution model and the deployment architecture model described in
			the next chapter.
		</para>
	</section>

	<section>
		<title>Disregarding the inter-dependency activation order</title>

		<para>
			As mentioned before, inter-dependencies serve two purposes -- to allow services to find them
			(e.g. by propagating their connection attributes) and to ensure that services are activated
			in the right order. It is not allowed that a service gets activated before any of its inter-dependencies.
		</para>

		<para>
			Activation order strictness is generally a good property, but it comes at a price. It makes
			certain kinds of upgrades very expensive. For example, when a service has to be updated, then
			all interdependent services need to be updated as well. For a services that has many interdependent
			services, this could become quite expensive.
		</para>

		<para>
			When a connection is not considered to be critical, e.g. if a disconnection for a short time
			does not bring the service's functionality down in a harmful way, it is possible to disregard
			the activation order, so that upgrades become less expensive and faster.
		</para>

		<example xml:id="ex-services-disregarding-order">
			<title>A service disregarding the activation order</title>
<programlisting>
StaffTracker = {
  name = "StaffTracker";
  pkg = customPkgs.StaffTracker;
  dependsOn = {
    inherit RoomService StaffService ZipcodeService;
  };
  connectsTo = {
    inherit GeolocationService;
  };
  type = "tomcat-webapplication";
};
</programlisting>
		</example>

		<para>
			To disregard the activation order, you can annotate a service with the <varname>connectsTo</varname>
			property instead of the <varname>dependsOn</varname> property.
			In <xref linkend="ex-services-disregarding-order" />, the connection to the
			<code>GeolocationService</code> is considered to be non-critial and Disnix will drop the guarantee
			that it will be deployed before the <code>StaffTracker</code>. Furthermore, the <code>StaffTracker</code>
			service will not be reactivated if the <code>GeolocationService</code> gets updated.
		</para>

		<para>
			Disregarding the order has another useful property. When two services mutually depend on each
			other they can also be declared inter-dependencies. This is particularly useful for systems
			that have a ring structure.
		</para>
	</section>

	<section>
		<title>Disregarding inter-dependency parameter propagation</title>

		<para>
			In addition to disregaring the ordering property of inter-dependencies (but still propagating
			the inter-dependencies and its properties as function parameters), it is also possible to do the opposite --
			not propagating the inter-dependency and its properties, but maintaing
			the activation order. This can be done by using the <varname>activatesAfter</varname> parameter
			instead of the <varname>dependsOn</varname> parameter.
		</para>

		<para>
			This property should only be used in exceptional cases. For example, it is internally used by
			Disnix to ensure that a service providing a container gets activated before a service that needs
			to be embedded in it, without propagating the container service as an inter-dependency parameter.
		</para>
		<para>
			The inter-dependency parameter must be dropped to ensure that containers on infrastructure level
			and service level can be used in an identical way.
			Otherwise, two different kinds of Disnix expressions are needed to work
			with a container that is provided by a service and by a target machine in the infrastructure model --
			one that references container properties from the service properties of an inter-dependency
			and one that uses the container properties from a target in the infrastructure model.
		</para>
	</section>
</chapter>
