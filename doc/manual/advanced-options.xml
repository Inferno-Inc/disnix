<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap-advanced-options">

	<title>Advanced options</title>

	<section>
		<title>Configuring a custom connection protocol</title>
		
		<para>
			As mentioned before, the Disnix service consists of a core service and a protocol wrapper.
			By default, an SSH wrapper is used, but other types of wrappers can be used as well,
			such as SOAP, provided by the external <code>DisnixWebService</code> package.
		</para>
		
		<para>
			The coordinator machine invokes an external process which performs communication with
			the Disnix service. By default <command>disnix-ssh-client</command> is consulted. A different
			client can be used by either setting the <varname>DISNIX_CLIENT_INTERFACE</varname>
			environment variable with the path to the executable or by using the
			<option>--interface</option> command-line option, for commands such as
			<command>disnix-env</command>.
		</para>
		
		<para>
			For example, by specifying:
		</para>
		
<screen>
$ export DISNIX_CLIENT_INTERFACE=disnix-soap-client
</screen>

		<para>
			The <command>disnix-soap-client</command> command is used to communicate with a remote Disnix service.
		</para>
		
		<para>
			Apart from configuring the coordinator machine, each target machine must also run the
			connection wrapper so that it can use the given protocol. Refer to the documentation
			of the extension for specific instructions.
		</para>
		
		<para>
			Another wrapper is <command>disnix-client</command> that 
			connects directly to the D-Bus system bus to invoke Disnix 
			service operations. This wrapper is useful for debugging purposes, but you cannot use this client
			for remote connections.
		</para>
		
		<para>
			In some cases, also the target property must be configured. By default, Disnix uses the
			<varname>hostname</varname> property in the infrastructure model, to determine
			how to connect to the remote Disnix service in order to perform remote deployment steps.
			This property is not suitable for every protocol. A web service interface
			interace, for example, requires an URL.
		</para>
		<para>
			The connection attribute can be changed by either setting the <envar>DISNIX_TARGET_PROPERTY</envar>
			environment variable with the attribute name that contains the address of the remote
			Disnix service or by using the <option>--target-property</option> command-line option.
		</para>
		
		<para>
			For example, by specifying:
		</para>
		
<screen>
$ export DISNIX_TARGET_PROPERTY=sshTarget
</screen>
		
		<para>
			The <varname>sshTarget</varname> attribute defined in the infrastructure model is used
			to determine the address of the Disnix service.
		</para>
		<para>
			It is also possible to define a target property and client interface for each individual
			machine to support multi connection protocol deployment. See <xref linkend="ex-infrastructure-model" />
			for more information.
		</para>
	</section>
	
	<section>
		<title>Managing multiple distributed system configurations</title>
		
		<para>
			By default, Disnix assumes that the models that you are currently using represent one particular
			distributed environment. You can also use multiple profiles, which allow you to maintain
			multiple distributed system environments from one coordinator machine.
			By using the <option>--profile</option> option for the <command>disnix-env</command>
			and <command>disnix-activate</command> commands, you can specify which profile you want
			to use, so that they do not interfere with each other.
		</para>
		
		<para>
			The following instructions will install a particular distributed environment:
		</para>
		
<screen>
$ disnix-env -s my-default-services.nix -i my-default-infrastructure.nix -d my-default-distribution.nix
</screen>
		
		<para>
			By running the following command with three models of another distributed environment:
		</para>

<screen>
$ disnix-env -s my-other-services.nix -i my-other-infrastructure.nix -d my-other-distribution.nix
</screen>

		<para>
			Disnix will <emphasis>upgrade</emphasis> the previous the default environment to match the models defined
			in the other environment, which is not desirable.
			However, by using the <option>--profile</option> option Disnix
			deploys the new distributed system without looking to the default system's deployment
			state and maintains two seperate configuration next to each other:
		</para>

<screen>
$ disnix-env --profile other -s my-other-services.nix -i my-other-infrastructure.nix -d my-other-distribution.nix
</screen>

		<para>
			Besides using the <option>--profile</option> option, you can also use an environment variable:
		</para>
<screen>
$ export DISNIX_PROFILE=other
</screen>
	</section>
	
	<section>
		<title>Enabling state deployment by default</title>
		
		<para>
			If it desired to let Disnix manage state, you must annotate the corresponding services in the service model.
			However, it is also possible to override Disnix's default behaviour to enable state manage management for all
			services by default.
		</para>
		
		<para>
			Global state deployment can be enabled by providing the <option>--deploy-state</option> command-line option to
			commands such as <command>disnix-env</command> or by setting the following environment variable:
		</para>
		
<screen>
$ export DISNIX_DEPLOY_STATE=1
</screen>
	</section>
	
	<section>
		<title>Multi-container deployment</title>
		
		<para>
			As described in <xref linkend="chap-basicusage" />, when mapping a service to a target machine in the distribution model,
			Disnix automatically maps the service to the appropriate container, by referring to a container with the same name as the type
			the service belongs to.
		</para>
		
		<para>
			In some unconventional scenarios, it may be desired to run multiple instances of the same container on one machine. In such
			cases, automapping no longer works and a different notation is required. In Disnix, the following mapping in the distribution model
			(mapping a service to a list of target machines in the infrastructure model):
		</para>
		
<screen>
ZipcodeService = [ infrastructure.test2 ];
</screen>
		
		<para>
			Is equivalent to the mapping in the following notation:
		</para>
  
<screen>
ZipcodeService = {
  targets = [ { target = infrastructure.test2; } ];
};
</screen>
		
		<para>
			In the above notation, we define an attribute set in which the <varname>targets</varname> property
			refers to a list of attribute sets defining all possible attributes of a mapping. This alternative notation
			is more verbose and allows more mapping properties to be specified.
		</para>
		
		<example xml:id="ex-infrastructure-containers-model">
			<title>Infrastructure model with multiple container instances</title>
<programlisting>
{
  test1 = {
    properties = {
      hostname = "test1.example.org";
    };
    
    containers = {
      tomcat-first = {
        tomcatPort = 8080;
      };
      
      tomcat-second = {
        tomcatPort = 8081;
      };
    };
  };
  
  test2 = {
    properties = {
      hostname = "test2.example.org";
    };
    
    containers = {
      mysql-first = {
        mysqlPort = 3306;
        mysqlUsername = "root";
        mysqlPassword = "admin";
      };
      
      mysql-second = {
        mysqlPort = 3307;
        mysqlUsername = "root";
        mysqlPassword = "secret";
      };
    };
  }; 
}
</programlisting>
		</example>
		
		<para>
			<xref linkend="ex-infrastructure-containers-model" /> is based on the StaffTracker infrastructure model
			shown in <xref linkend="ex-infrastructure-model" />. In this modified infrastructure model, the <varname>test1</varname> machine
			hosts two Apache Tomcat servers (one listening on TCP port 8080 and the other on TCP port 8081) and the <varname>test2</varname>
			machine hosts two MySQL DBMSes (one listening on TCP port 3306 and the other on TCP port 3307).
			Because we have two instances of each container and their names do not correspond to the services types, automapping
			no longer works.
		</para>

		<example xml:id="ex-distribution-containers-model">
			<title>Distribution model for the <code>StaffTracker</code> mapping to multiple containers</title>
			
<programlisting>
{infrastructure}:

{
  zipcodes = {
    targets = [ { target = infrastructure.test2; container = "mysql-first"; } ]; <co xml:id='co-mysql-first' />
  };
  ZipcodeService = {
    targets = [ { target = infrastructure.test1; container = "tomcat-second"; } ]; <co xml:id='co-tomcat-second' />
  };
  StaffTracker = {
    targets = [ <co xml:id='co-multi-containers' />
      { target = infrastructure.test1; container = "tomcat-first"; }
      { target = infrastructure.test1; container = "tomcat-second"; }
    ];
  };
  ...
}
</programlisting>
		</example>

		<para>
			<xref linkend="ex-distribution-containers-model" /> shows a distribution model using the alternative
			notation to directly control the container mappings:
		</para>
			
		<calloutlist>
			<callout arearefs='co-mysql-first'>
				<para>
					This mapping states that the <varname>zipcodes</varname> database should be deployed to the first MySQL instance container (<varname>mysql-first</varname>)
					on machine <varname>test2</varname>.
				</para>
			</callout>
			<callout arearefs='co-tomcat-second'>
				<para>
					This mapping states that the <varname>ZipcodeService</varname> application should be deployed to the second Apache Tomcat container (<varname>tomcat-second</varname>)
					on machine <varname>test1</varname>.
				</para>
			</callout>
			<callout arearefs='co-multi-containers'>
				<para>
					It also possible to map a service to multiple containers on multiple machines. This line states that the <varname>StaffTracker</varname> service should be deployed
					to both the first and second Apache Tomcat container on machine <varname>test1</varname>.
				</para>
			</callout>
		</calloutlist>
	</section>

	<section>
		<title>Diagnosing errors and executing arbitrary maintenance tasks</title>

		<para>
			When running production systems, you cannot get around unforeseen incidents and problems, such as crashes and database inconsistencies.
			To make diagnosing errors and executing arbitrary maintenance tasks more convenient, the <command>disnix-diagnose</command> can be used.
			The purpose of this tool is to spawn remote shell sessions containing all relevant configuration settings as environment variables.
			Furthermore, it will display command-line suggestions with command maintenance tasks.
		</para>

		<para>
			To spawn a diagnostic interactive shell for a service, such as the <code>staff</code> MySQL database, simply run:
		</para>

<screen>
$ disnix-diagnose -S staff
</screen>

		<para>
			The above command will query the deployment configuration of the system, remotely connects to the machine (typically through SSH) and
			spawns a diagnostic shell session.
		</para>

		<para>
			It is also possible to execute arbitrary shell commands in the session. For example, the following command will query all staff records:
		</para>

<screen>
$ disnix-diagnose -S staff --command 'echo "select * from staff" | mysql -u $mysqlUsername -p $mysqlPassword staff'
</screen>

		<para>
			Disnix can also host redundant instances of the same service. In such cases, you must refine the search query with a target or container
			parameter. The following instruction specifies that we want to connect to the <code>StaffTracker</code> service deployed to machine
			<code>test1</code>:
		</para>

<screen>
$ disnix-diagnose -S StaffTracker --target test1
</screen>

		<para>
			It is still possible to execute remote shell commands for redundantly deployed instances. For example, the following command may
			be executed several times:
		</para>

<screen>
$ disnix-diagnose -S StaffTracker --command 'echo I may see this message multiple times!'
</screen>

		<para>
			In some cases, you may want to execute other kinds of maintenance tasks or you simply want to know where a particular service resides.
			This can be done by running the following command:
		</para>

<screen>
$ disnix-diagnose -S StaffTracker --show-mappings
</screen>

		<para>
			As a remark: the diagnose tool does not work with all Disnix client instances. Currently, only connectors that use SSH are supported!
		</para>
	</section>
</chapter>
