<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap-advanced-options">

	<title>Advanced options</title>

	<section>
		<title>Configuring a custom connection protocol</title>
		
		<para>
			As mentioned before, the Disnix service consists of a core service and a protocol wrapper.
			By default, an SSH wrapper is used, but other types of wrappers can be used as well,
			such as SOAP, provided by the external <code>DisnixWebService</code> package.  
		</para>
		
		<para>
			The coordinator machine invokes an external process which performs communication with
			the Disnix service. By default <command>disnix-ssh-client</command> is consulted. A different
			client can be used by either setting the <varname>DISNIX_CLIENT_INTERFACE</varname>
			environment variable with the path to the executable or by using the
			<option>--interface</option> command-line option, for commands such as
			<command>disnix-env</command>.
		</para>
		
		<para>
			For example, by specifying:
		</para>
		
<screen>
$ export DISNIX_CLIENT_INTERFACE=disnix-soap-client
</screen>

		<para>
			The <command>disnix-soap-client</command> command is used to communicate with a remote Disnix service.
		</para>
		
		<para>
			Apart from configuring the coordinator machine, each target machine must also run the
			connection wrapper so that it can use the given protocol. Refer to the documentation
			of the extension for specific instructions.
		</para>
		
		<para>
			Another wrapper is  <command>disnix-client</command> that 
			connects directly to the D-Bus system bus to invoke Disnix 
			service operations. This wrapper is useful for debugging purposes, but you cannot use this client
			for remote connections.
		</para>
		
		<para>
			In some cases, also the target property must be configured. By default, Disnix uses the
			<varname>hostname</varname> property in the infrastructure model, to determine
			how to connect to the remote Disnix service in order to perform remote deployment steps.
			This property is not always sufficient for every protocol. A web service interface may require a URL
			or a connection string may also need a port number specification.
		</para>
		<para>
			The connection attribute can be changed by either setting the <varname>DISNIX_TARGET_PROPERTY</varname>
			environment variable with the attribute name that contains the address of the remote
			Disnix service or by using the <option>--target-property</option> command-line option.
		</para>
		
		<para>
			For example, by specifying:
		</para>
		
<screen>
$ export DISNIX_TARGET_PROPERTY=sshTarget
</screen>
		
		<para>
			The <varname>sshTarget</varname> attribute defined in the infrastructure model is used
			to determine the address of the Disnix service.
		</para>
		<para>
			It is also possible to define a target property and client interface for each individual
			machine to support multi connection protocol deployment. See <xref linkend="ex-6-infrastructure-model" />
			for more information.
		</para>
	</section>
	
	<section>
		<title>Managing multiple distributed system configurations</title>
		
		<para>
			By default, Disnix assumes that the models that you are currently using represent one particular
			distributed environment. You can also use multiple profiles, which allow you to maintain
			multiple distributed system environments from one coordinator machine.
			By using the <option>--profile</option> option for the <command>disnix-env</command>
			and <command>disnix-activate</command> commands, you can specify which profile you want
			to use, so that they do not interfere with each other.
		</para>
		
		<para>
			The following instructions will install a particular distributed environment:
		</para>
		
<screen>
$ disnix-env -s my-default-services.nix -i my-default-infrastructure.nix -d my-default-distribution.nix
</screen>
		
		<para>
			By running the following command with three models of another distributed environment:
		</para>

<screen>
$ disnix-env -s my-other-services.nix -i my-other-infrastructure.nix -d my-other-distribution.nix
</screen>

		<para>
			Disnix will <emphasis>upgrade</emphasis> the previous the default environment to match the models defined
			in the other environment, which is not desirable.
			However, by using the <option>--profile</option> option Disnix
			deploys the new distributed system without looking to the default system's deployment
			state and maintains two seperate configuration next to each other:
		</para>

<screen>
$ disnix-env --profile other -s my-other-services.nix -i my-other-infrastructure.nix -d my-other-distribution.nix
</screen>
	</section>
</chapter>
