<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap-overview">

	<title>Overview</title>

	<figure>
		<title>An overview of Disnix</title>		
		<mediaobject>
			<imageobject>
				<imagedata fileref="model.png" format="PNG"/>
			</imageobject>
		</mediaobject>
	</figure>

	<para>
		The figure above illustrates Disnix's deployment concepts in a nutshell.
		In the center of the figure the <command>disnix-env</command>
		command line tool is shown, which takes care of performing a complete deployment
		process of a distributed system.
	</para>
	<para>
		This tool requires three models as input parameters, which are shown
		on the left side of the figure.
		The <emphasis>services model</emphasis> describes of which distributable
		components (called services) the system consists, their inter-dependencies and their types.
		The <emphasis>infrastructure model</emphasis> describes all the machines
		in the network and their relevant properties and capabilities.
		The <emphasis>distribution model</emphasis> maps services defined
		in the services model to machines defined in the infrastructure model.
	</para>
	<para>
		The service model has a reference to the file named <filename>all-packages.nix</filename>,
		which captures all the intra-dependency compositions of every service,
		such as libraries, configuration files and compilers.
	</para>
	<para>
		On the right side of the figure, the network is shown in which the system
		has to be deployed. Every machine in the network requires a
		<emphasis>DisnixService</emphasis> instance to be installed, so that
		remote deployment steps can be performed from the coordinator machine.
	</para>

	<para>
		The machine on which <command>disnix-env</command> is executed is called
		the <emphasis>coordinator</emphasis> machine. The machines in the network
		are called <emphasis>targets</emphasis>.
	</para>

	<para>
		By writing instances of the specifications shown above and running the following command on
		the coordinator machine:

<screen>
$ disnix-env -s services.nix -i infrastructure.nix -d distribution.nix
</screen>

		All the services that are defined in the distribution model (including all their intra-dependencies)
		are built from source code,
		then transferred to the machines in the network and finally activated in the right order.
	</para>
	<para>
		By adapting one of the models and by running <command>disnix-env</command> again,
		an upgrade is performed. In case of an upgrade, only services that have changed are built from
		source code, only components that have to be upgraded are transferred to target
		machines and only changed services are deactivated and activated (also in the right
		order), making this phase efficient and reliable.
	</para>

	<para>
		Since the coordinator machine may be of a different type (e.g. CPU or operating system)
		as one of the machines in the
		network, it may not be able to compile a service on the coordinator machine for a given target platform.
		In such cases, Disnix can also compile a service on a target machine in the network or
		use Nix to delegate a build to a machine capable of building it.
	</para>
	
	<para>
		Optionally, Disnix can also move the state of a service from machine to another.
		For example, when deploying databases Disnix only ensures that they are created with
		a schema and initial dataset. However, when the structure and contents of a database
		evolves, the changes are not migrated automatically.
	</para>
	
	<para>
		As a solution, Disnix has a mechanism that snapshots, moves and restores state of a service
		if it has been explicitly enabled for that particular service.
	</para>
</chapter>
